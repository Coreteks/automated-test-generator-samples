<?php

namespace tests;

use Mockery as m;
use wpdb;

class wpdbTest extends \PHPUnit_Framework_TestCase
{
/**
* @var mixed
*/
protected $_dbuser = null;
/**
* @var mixed
*/
protected $_dbpassword = null;
/**
* @var mixed
*/
protected $_dbname = null;
/**
* @var mixed
*/
protected $_dbhost = null;
/**
* @var \wpdb
*/
protected $wpdb;

public function setUp()
{
    parent::setUp();

    $this->_dbuser = null;
    $this->_dbpassword = null;
    $this->_dbname = null;
    $this->_dbhost = null;
    $this->wpdb = new \wpdb($this->_dbuser, $this->_dbpassword, $this->_dbname, $this->_dbhost);
}

public function test__destruct0()
{
    // TODO: Your mock expectations here

    $actual = $this->wpdb->__destruct();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function test__get0()
{
    $name = m::mock('UntypedParameter_name_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ('col_info' === $name) == false (line 638)

    $actual = $this->wpdb->__get($name);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function test__get1()
{
    $name = m::mock('UntypedParameter_name_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ('col_info' === $name) == true (line 638)

    $actual = $this->wpdb->__get($name);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function test__set0()
{
    $name = m::mock('UntypedParameter_name_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\in_array($name, $protected_members, \true)) == false (line 659)

    $actual = $this->wpdb->__set($name, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function test__set1()
{
    $name = m::mock('UntypedParameter_name_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\in_array($name, $protected_members, \true)) == true (line 659)

    $actual = $this->wpdb->__set($name, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function test__isset0()
{
    $name = m::mock('UntypedParameter_name_');

    // TODO: Your mock expectations here

    $actual = $this->wpdb->__isset($name);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function test__unset0()
{
    $name = m::mock('UntypedParameter_name_');

    // TODO: Your mock expectations here

    $actual = $this->wpdb->__unset($name);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testInit_charset0()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\function_exists('is_multisite') && \is_multisite()) == false (line 698)
    // if (\defined('DB_COLLATE')) == false (line 705)
    // if (\defined('DB_CHARSET')) == false (line 709)

    $actual = $this->wpdb->init_charset();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testInit_charset1()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\function_exists('is_multisite') && \is_multisite()) == false (line 698)
    // if (\defined('DB_COLLATE')) == false (line 705)
    // if (\defined('DB_CHARSET')) == true (line 709)

    $actual = $this->wpdb->init_charset();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testInit_charset2()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\function_exists('is_multisite') && \is_multisite()) == false (line 698)
    // if (\defined('DB_COLLATE')) == true (line 705)
    // if (\defined('DB_CHARSET')) == false (line 709)

    $actual = $this->wpdb->init_charset();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testInit_charset3()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\function_exists('is_multisite') && \is_multisite()) == false (line 698)
    // if (\defined('DB_COLLATE')) == true (line 705)
    // if (\defined('DB_CHARSET')) == true (line 709)

    $actual = $this->wpdb->init_charset();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testInit_charset4()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\function_exists('is_multisite') && \is_multisite()) == true (line 698)
    // if (\defined('DB_COLLATE') && \DB_COLLATE) == false (line 700)
    // if (\defined('DB_CHARSET')) == false (line 709)

    $actual = $this->wpdb->init_charset();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testInit_charset5()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\function_exists('is_multisite') && \is_multisite()) == true (line 698)
    // if (\defined('DB_COLLATE') && \DB_COLLATE) == false (line 700)
    // if (\defined('DB_CHARSET')) == true (line 709)

    $actual = $this->wpdb->init_charset();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testInit_charset6()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\function_exists('is_multisite') && \is_multisite()) == true (line 698)
    // if (\defined('DB_COLLATE') && \DB_COLLATE) == true (line 700)
    // if (\defined('DB_CHARSET')) == false (line 709)

    $actual = $this->wpdb->init_charset();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testInit_charset7()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\function_exists('is_multisite') && \is_multisite()) == true (line 698)
    // if (\defined('DB_COLLATE') && \DB_COLLATE) == true (line 700)
    // if (\defined('DB_CHARSET')) == true (line 709)

    $actual = $this->wpdb->init_charset();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset0()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == false (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == false (line 739)
    // if ('utf8mb4' === $charset) == false (line 744)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == false (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset1()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == false (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == false (line 739)
    // if ('utf8mb4' === $charset) == false (line 744)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == true (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset2()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == false (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == false (line 739)
    // if ('utf8mb4' === $charset) == true (line 744)
    // if (!$collate || 'utf8_general_ci' === $collate) == false (line 746)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == false (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset3()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == false (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == false (line 739)
    // if ('utf8mb4' === $charset) == true (line 744)
    // if (!$collate || 'utf8_general_ci' === $collate) == false (line 746)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == true (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset4()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == false (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == false (line 739)
    // if ('utf8mb4' === $charset) == true (line 744)
    // if (!$collate || 'utf8_general_ci' === $collate) == true (line 746)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == false (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset5()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == false (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == false (line 739)
    // if ('utf8mb4' === $charset) == true (line 744)
    // if (!$collate || 'utf8_general_ci' === $collate) == true (line 746)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == true (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset6()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == false (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == true (line 739)
    // if ('utf8mb4' === $charset) == false (line 744)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == false (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset7()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == false (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == true (line 739)
    // if ('utf8mb4' === $charset) == false (line 744)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == true (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset8()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == false (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == true (line 739)
    // if ('utf8mb4' === $charset) == true (line 744)
    // if (!$collate || 'utf8_general_ci' === $collate) == false (line 746)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == false (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset9()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == false (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == true (line 739)
    // if ('utf8mb4' === $charset) == true (line 744)
    // if (!$collate || 'utf8_general_ci' === $collate) == false (line 746)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == true (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset10()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == false (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == true (line 739)
    // if ('utf8mb4' === $charset) == true (line 744)
    // if (!$collate || 'utf8_general_ci' === $collate) == true (line 746)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == false (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset11()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == false (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == true (line 739)
    // if ('utf8mb4' === $charset) == true (line 744)
    // if (!$collate || 'utf8_general_ci' === $collate) == true (line 746)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == true (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset12()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == true (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == false (line 739)
    // if ('utf8mb4' === $charset) == false (line 744)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == false (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset13()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == true (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == false (line 739)
    // if ('utf8mb4' === $charset) == false (line 744)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == true (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset14()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == true (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == false (line 739)
    // if ('utf8mb4' === $charset) == true (line 744)
    // if (!$collate || 'utf8_general_ci' === $collate) == false (line 746)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == false (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset15()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == true (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == false (line 739)
    // if ('utf8mb4' === $charset) == true (line 744)
    // if (!$collate || 'utf8_general_ci' === $collate) == false (line 746)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == true (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset16()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == true (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == false (line 739)
    // if ('utf8mb4' === $charset) == true (line 744)
    // if (!$collate || 'utf8_general_ci' === $collate) == true (line 746)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == false (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset17()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == true (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == false (line 739)
    // if ('utf8mb4' === $charset) == true (line 744)
    // if (!$collate || 'utf8_general_ci' === $collate) == true (line 746)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == true (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset18()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == true (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == true (line 739)
    // if ('utf8mb4' === $charset) == false (line 744)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == false (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset19()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == true (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == true (line 739)
    // if ('utf8mb4' === $charset) == false (line 744)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == true (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset20()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == true (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == true (line 739)
    // if ('utf8mb4' === $charset) == true (line 744)
    // if (!$collate || 'utf8_general_ci' === $collate) == false (line 746)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == false (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset21()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == true (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == true (line 739)
    // if ('utf8mb4' === $charset) == true (line 744)
    // if (!$collate || 'utf8_general_ci' === $collate) == false (line 746)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == true (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset22()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == true (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == true (line 739)
    // if ('utf8mb4' === $charset) == true (line 744)
    // if (!$collate || 'utf8_general_ci' === $collate) == true (line 746)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == false (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset23()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == false (line 731)
    // if ('utf8' === $charset && $this->has_cap('utf8mb4')) == true (line 735)
    // if ('utf8mb4' === $charset && !$this->has_cap('utf8mb4')) == true (line 739)
    // if ('utf8mb4' === $charset) == true (line 744)
    // if (!$collate || 'utf8_general_ci' === $collate) == true (line 746)
    // if ($this->has_cap('utf8mb4_520') && 'utf8mb4_unicode_ci' === $collate) == true (line 754)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDetermine_charset24()
{
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && !$this->dbh instanceof \mysqli || empty($this->dbh)) == true (line 731)

    $actual = $this->wpdb->determine_charset($charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset0()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == false (line 777)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset1()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == false (line 793)
    // if ($set_charset_succeeded) == false (line 796)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset2()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == false (line 793)
    // if ($set_charset_succeeded) == true (line 796)
    // if (!empty($collate)) == false (line 798)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset3()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == false (line 793)
    // if ($set_charset_succeeded) == true (line 796)
    // if (!empty($collate)) == true (line 798)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset4()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == true (line 793)
    // if ($set_charset_succeeded) == false (line 796)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset5()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == true (line 793)
    // if ($set_charset_succeeded) == true (line 796)
    // if (!empty($collate)) == false (line 798)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset6()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == true (line 793)
    // if ($set_charset_succeeded) == true (line 796)
    // if (!empty($collate)) == true (line 798)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset7()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == false (line 781)
    // if ($set_charset_succeeded) == false (line 785)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset8()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == false (line 781)
    // if ($set_charset_succeeded) == true (line 785)
    // if (!empty($collate)) == false (line 787)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset9()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == false (line 781)
    // if ($set_charset_succeeded) == true (line 785)
    // if (!empty($collate)) == true (line 787)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset10()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == true (line 781)
    // if ($set_charset_succeeded) == false (line 785)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset11()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == true (line 781)
    // if ($set_charset_succeeded) == true (line 785)
    // if (!empty($collate)) == false (line 787)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset12()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == true (line 781)
    // if ($set_charset_succeeded) == true (line 785)
    // if (!empty($collate)) == true (line 787)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset13()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == false (line 777)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset14()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == false (line 793)
    // if ($set_charset_succeeded) == false (line 796)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset15()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == false (line 793)
    // if ($set_charset_succeeded) == true (line 796)
    // if (!empty($collate)) == false (line 798)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset16()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == false (line 793)
    // if ($set_charset_succeeded) == true (line 796)
    // if (!empty($collate)) == true (line 798)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset17()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == true (line 793)
    // if ($set_charset_succeeded) == false (line 796)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset18()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == true (line 793)
    // if ($set_charset_succeeded) == true (line 796)
    // if (!empty($collate)) == false (line 798)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset19()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == true (line 793)
    // if ($set_charset_succeeded) == true (line 796)
    // if (!empty($collate)) == true (line 798)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset20()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == false (line 781)
    // if ($set_charset_succeeded) == false (line 785)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset21()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == false (line 781)
    // if ($set_charset_succeeded) == true (line 785)
    // if (!empty($collate)) == false (line 787)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset22()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == false (line 781)
    // if ($set_charset_succeeded) == true (line 785)
    // if (!empty($collate)) == true (line 787)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset23()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == true (line 781)
    // if ($set_charset_succeeded) == false (line 785)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset24()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == true (line 781)
    // if ($set_charset_succeeded) == true (line 785)
    // if (!empty($collate)) == false (line 787)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset25()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == false (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == true (line 781)
    // if ($set_charset_succeeded) == true (line 785)
    // if (!empty($collate)) == true (line 787)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset26()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == false (line 777)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset27()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == false (line 793)
    // if ($set_charset_succeeded) == false (line 796)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset28()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == false (line 793)
    // if ($set_charset_succeeded) == true (line 796)
    // if (!empty($collate)) == false (line 798)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset29()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == false (line 793)
    // if ($set_charset_succeeded) == true (line 796)
    // if (!empty($collate)) == true (line 798)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset30()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == true (line 793)
    // if ($set_charset_succeeded) == false (line 796)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset31()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == true (line 793)
    // if ($set_charset_succeeded) == true (line 796)
    // if (!empty($collate)) == false (line 798)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset32()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == true (line 793)
    // if ($set_charset_succeeded) == true (line 796)
    // if (!empty($collate)) == true (line 798)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset33()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == false (line 781)
    // if ($set_charset_succeeded) == false (line 785)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset34()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == false (line 781)
    // if ($set_charset_succeeded) == true (line 785)
    // if (!empty($collate)) == false (line 787)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset35()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == false (line 781)
    // if ($set_charset_succeeded) == true (line 785)
    // if (!empty($collate)) == true (line 787)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset36()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == true (line 781)
    // if ($set_charset_succeeded) == false (line 785)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset37()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == true (line 781)
    // if ($set_charset_succeeded) == true (line 785)
    // if (!empty($collate)) == false (line 787)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset38()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == false (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == true (line 781)
    // if ($set_charset_succeeded) == true (line 785)
    // if (!empty($collate)) == true (line 787)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset39()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == false (line 777)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset40()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == false (line 793)
    // if ($set_charset_succeeded) == false (line 796)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset41()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == false (line 793)
    // if ($set_charset_succeeded) == true (line 796)
    // if (!empty($collate)) == false (line 798)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset42()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == false (line 793)
    // if ($set_charset_succeeded) == true (line 796)
    // if (!empty($collate)) == true (line 798)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset43()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == true (line 793)
    // if ($set_charset_succeeded) == false (line 796)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset44()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == true (line 793)
    // if ($set_charset_succeeded) == true (line 796)
    // if (!empty($collate)) == false (line 798)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset45()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == false (line 780)
    // if (\function_exists('mysql_set_charset') && $this->has_cap('set_charset')) == true (line 793)
    // if ($set_charset_succeeded) == true (line 796)
    // if (!empty($collate)) == true (line 798)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset46()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == false (line 781)
    // if ($set_charset_succeeded) == false (line 785)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset47()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == false (line 781)
    // if ($set_charset_succeeded) == true (line 785)
    // if (!empty($collate)) == false (line 787)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset48()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == false (line 781)
    // if ($set_charset_succeeded) == true (line 785)
    // if (!empty($collate)) == true (line 787)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset49()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == true (line 781)
    // if ($set_charset_succeeded) == false (line 785)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset50()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == true (line 781)
    // if ($set_charset_succeeded) == true (line 785)
    // if (!empty($collate)) == false (line 787)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_charset51()
{
    $dbh = m::mock('UntypedParameter_dbh_');
    $charset = m::mock('UntypedParameter_charset_');
    $collate = m::mock('UntypedParameter_collate_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($charset)) == true (line 771)
    // if (!isset($collate)) == true (line 774)
    // if ($this->has_cap('collation') && !empty($charset)) == true (line 777)
    // if ($this->use_mysqli) == true (line 780)
    // if (\function_exists('mysqli_set_charset') && $this->has_cap('set_charset')) == true (line 781)
    // if ($set_charset_succeeded) == true (line 785)
    // if (!empty($collate)) == true (line 787)

    $actual = $this->wpdb->set_charset($dbh, $charset, $collate);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode0()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == false (line 818)
    // if ($this->use_mysqli) == false (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode1()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == false (line 818)
    // if ($this->use_mysqli) == true (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode2()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == false (line 818)
    // if (\in_array($mode, $incompatible_modes)) == false (line 858)
    // if ($this->use_mysqli) == false (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode3()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == false (line 818)
    // if (\in_array($mode, $incompatible_modes)) == false (line 858)
    // if ($this->use_mysqli) == true (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode4()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == false (line 818)
    // if (\in_array($mode, $incompatible_modes)) == true (line 858)
    // if ($this->use_mysqli) == false (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode5()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == false (line 818)
    // if (\in_array($mode, $incompatible_modes)) == true (line 858)
    // if ($this->use_mysqli) == true (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode6()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == false (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == false (line 829)
    // if (empty($modes_str)) == false (line 839)
    // if ($this->use_mysqli) == false (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode7()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == false (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == false (line 829)
    // if (empty($modes_str)) == false (line 839)
    // if ($this->use_mysqli) == true (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode8()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == false (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == false (line 829)
    // if (empty($modes_str)) == false (line 839)
    // if (\in_array($mode, $incompatible_modes)) == false (line 858)
    // if ($this->use_mysqli) == false (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode9()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == false (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == false (line 829)
    // if (empty($modes_str)) == false (line 839)
    // if (\in_array($mode, $incompatible_modes)) == false (line 858)
    // if ($this->use_mysqli) == true (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode10()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == false (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == false (line 829)
    // if (empty($modes_str)) == false (line 839)
    // if (\in_array($mode, $incompatible_modes)) == true (line 858)
    // if ($this->use_mysqli) == false (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode11()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == false (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == false (line 829)
    // if (empty($modes_str)) == false (line 839)
    // if (\in_array($mode, $incompatible_modes)) == true (line 858)
    // if ($this->use_mysqli) == true (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode12()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == false (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == false (line 829)
    // if (empty($modes_str)) == true (line 839)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode13()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == false (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == true (line 829)
    // if (empty($modes_array[0])) == false (line 831)
    // if (empty($modes_str)) == false (line 839)
    // if ($this->use_mysqli) == false (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode14()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == false (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == true (line 829)
    // if (empty($modes_array[0])) == false (line 831)
    // if (empty($modes_str)) == false (line 839)
    // if ($this->use_mysqli) == true (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode15()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == false (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == true (line 829)
    // if (empty($modes_array[0])) == false (line 831)
    // if (empty($modes_str)) == false (line 839)
    // if (\in_array($mode, $incompatible_modes)) == false (line 858)
    // if ($this->use_mysqli) == false (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode16()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == false (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == true (line 829)
    // if (empty($modes_array[0])) == false (line 831)
    // if (empty($modes_str)) == false (line 839)
    // if (\in_array($mode, $incompatible_modes)) == false (line 858)
    // if ($this->use_mysqli) == true (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode17()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == false (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == true (line 829)
    // if (empty($modes_array[0])) == false (line 831)
    // if (empty($modes_str)) == false (line 839)
    // if (\in_array($mode, $incompatible_modes)) == true (line 858)
    // if ($this->use_mysqli) == false (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode18()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == false (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == true (line 829)
    // if (empty($modes_array[0])) == false (line 831)
    // if (empty($modes_str)) == false (line 839)
    // if (\in_array($mode, $incompatible_modes)) == true (line 858)
    // if ($this->use_mysqli) == true (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode19()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == false (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == true (line 829)
    // if (empty($modes_array[0])) == false (line 831)
    // if (empty($modes_str)) == true (line 839)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode20()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == false (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == true (line 829)
    // if (empty($modes_array[0])) == true (line 831)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode21()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == false (line 819)
    // if (empty($res)) == true (line 825)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode22()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == true (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == false (line 829)
    // if (empty($modes_str)) == false (line 839)
    // if ($this->use_mysqli) == false (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode23()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == true (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == false (line 829)
    // if (empty($modes_str)) == false (line 839)
    // if ($this->use_mysqli) == true (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode24()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == true (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == false (line 829)
    // if (empty($modes_str)) == false (line 839)
    // if (\in_array($mode, $incompatible_modes)) == false (line 858)
    // if ($this->use_mysqli) == false (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode25()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == true (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == false (line 829)
    // if (empty($modes_str)) == false (line 839)
    // if (\in_array($mode, $incompatible_modes)) == false (line 858)
    // if ($this->use_mysqli) == true (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode26()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == true (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == false (line 829)
    // if (empty($modes_str)) == false (line 839)
    // if (\in_array($mode, $incompatible_modes)) == true (line 858)
    // if ($this->use_mysqli) == false (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode27()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == true (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == false (line 829)
    // if (empty($modes_str)) == false (line 839)
    // if (\in_array($mode, $incompatible_modes)) == true (line 858)
    // if ($this->use_mysqli) == true (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode28()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == true (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == false (line 829)
    // if (empty($modes_str)) == true (line 839)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode29()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == true (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == true (line 829)
    // if (empty($modes_array[0])) == false (line 831)
    // if (empty($modes_str)) == false (line 839)
    // if ($this->use_mysqli) == false (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode30()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == true (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == true (line 829)
    // if (empty($modes_array[0])) == false (line 831)
    // if (empty($modes_str)) == false (line 839)
    // if ($this->use_mysqli) == true (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode31()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == true (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == true (line 829)
    // if (empty($modes_array[0])) == false (line 831)
    // if (empty($modes_str)) == false (line 839)
    // if (\in_array($mode, $incompatible_modes)) == false (line 858)
    // if ($this->use_mysqli) == false (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode32()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == true (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == true (line 829)
    // if (empty($modes_array[0])) == false (line 831)
    // if (empty($modes_str)) == false (line 839)
    // if (\in_array($mode, $incompatible_modes)) == false (line 858)
    // if ($this->use_mysqli) == true (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode33()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == true (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == true (line 829)
    // if (empty($modes_array[0])) == false (line 831)
    // if (empty($modes_str)) == false (line 839)
    // if (\in_array($mode, $incompatible_modes)) == true (line 858)
    // if ($this->use_mysqli) == false (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode34()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == true (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == true (line 829)
    // if (empty($modes_array[0])) == false (line 831)
    // if (empty($modes_str)) == false (line 839)
    // if (\in_array($mode, $incompatible_modes)) == true (line 858)
    // if ($this->use_mysqli) == true (line 865)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode35()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == true (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == true (line 829)
    // if (empty($modes_array[0])) == false (line 831)
    // if (empty($modes_str)) == true (line 839)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode36()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == true (line 819)
    // if (empty($res)) == false (line 825)
    // if ($this->use_mysqli) == true (line 829)
    // if (empty($modes_array[0])) == true (line 831)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_sql_mode37()
{
    $modes = m::mock('UntypedParameter_modes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($modes)) == true (line 818)
    // if ($this->use_mysqli) == true (line 819)
    // if (empty($res)) == true (line 825)

    $actual = $this->wpdb->set_sql_mode($modes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_prefix0()
{
    $prefix = m::mock('UntypedParameter_prefix_');
    $set_table_names = m::mock('UntypedParameter_set_table_names_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('|[^a-z0-9_]|i', $prefix)) == false (line 883)
    // if (isset($this->base_prefix)) == false (line 889)
    // if ($set_table_names) == false (line 895)

    $actual = $this->wpdb->set_prefix($prefix, $set_table_names);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_prefix1()
{
    $prefix = m::mock('UntypedParameter_prefix_');
    $set_table_names = m::mock('UntypedParameter_set_table_names_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('|[^a-z0-9_]|i', $prefix)) == false (line 883)
    // if (isset($this->base_prefix)) == false (line 889)
    // if ($set_table_names) == true (line 895)
    // if (\is_multisite() && empty($this->blogid)) == false (line 900)

    $actual = $this->wpdb->set_prefix($prefix, $set_table_names);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_prefix2()
{
    $prefix = m::mock('UntypedParameter_prefix_');
    $set_table_names = m::mock('UntypedParameter_set_table_names_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('|[^a-z0-9_]|i', $prefix)) == false (line 883)
    // if (isset($this->base_prefix)) == false (line 889)
    // if ($set_table_names) == true (line 895)
    // if (\is_multisite() && empty($this->blogid)) == false (line 900)

    $actual = $this->wpdb->set_prefix($prefix, $set_table_names);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_prefix3()
{
    $prefix = m::mock('UntypedParameter_prefix_');
    $set_table_names = m::mock('UntypedParameter_set_table_names_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('|[^a-z0-9_]|i', $prefix)) == false (line 883)
    // if (isset($this->base_prefix)) == false (line 889)
    // if ($set_table_names) == true (line 895)
    // if (\is_multisite() && empty($this->blogid)) == false (line 900)

    $actual = $this->wpdb->set_prefix($prefix, $set_table_names);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_prefix4()
{
    $prefix = m::mock('UntypedParameter_prefix_');
    $set_table_names = m::mock('UntypedParameter_set_table_names_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('|[^a-z0-9_]|i', $prefix)) == false (line 883)
    // if (isset($this->base_prefix)) == false (line 889)
    // if ($set_table_names) == true (line 895)
    // if (\is_multisite() && empty($this->blogid)) == false (line 900)

    $actual = $this->wpdb->set_prefix($prefix, $set_table_names);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_prefix5()
{
    $prefix = m::mock('UntypedParameter_prefix_');
    $set_table_names = m::mock('UntypedParameter_set_table_names_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('|[^a-z0-9_]|i', $prefix)) == false (line 883)
    // if (isset($this->base_prefix)) == false (line 889)
    // if ($set_table_names) == true (line 895)
    // if (\is_multisite() && empty($this->blogid)) == true (line 900)

    $actual = $this->wpdb->set_prefix($prefix, $set_table_names);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_prefix6()
{
    $prefix = m::mock('UntypedParameter_prefix_');
    $set_table_names = m::mock('UntypedParameter_set_table_names_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('|[^a-z0-9_]|i', $prefix)) == false (line 883)
    // if (isset($this->base_prefix)) == false (line 889)
    // if ($set_table_names) == true (line 895)
    // if (\is_multisite() && empty($this->blogid)) == false (line 900)

    $actual = $this->wpdb->set_prefix($prefix, $set_table_names);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_prefix7()
{
    $prefix = m::mock('UntypedParameter_prefix_');
    $set_table_names = m::mock('UntypedParameter_set_table_names_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('|[^a-z0-9_]|i', $prefix)) == false (line 883)
    // if (isset($this->base_prefix)) == false (line 889)
    // if ($set_table_names) == true (line 895)
    // if (\is_multisite() && empty($this->blogid)) == false (line 900)

    $actual = $this->wpdb->set_prefix($prefix, $set_table_names);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_prefix8()
{
    $prefix = m::mock('UntypedParameter_prefix_');
    $set_table_names = m::mock('UntypedParameter_set_table_names_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('|[^a-z0-9_]|i', $prefix)) == false (line 883)
    // if (isset($this->base_prefix)) == false (line 889)
    // if ($set_table_names) == true (line 895)
    // if (\is_multisite() && empty($this->blogid)) == false (line 900)

    $actual = $this->wpdb->set_prefix($prefix, $set_table_names);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_prefix9()
{
    $prefix = m::mock('UntypedParameter_prefix_');
    $set_table_names = m::mock('UntypedParameter_set_table_names_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('|[^a-z0-9_]|i', $prefix)) == false (line 883)
    // if (isset($this->base_prefix)) == false (line 889)
    // if ($set_table_names) == true (line 895)
    // if (\is_multisite() && empty($this->blogid)) == false (line 900)

    $actual = $this->wpdb->set_prefix($prefix, $set_table_names);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_prefix10()
{
    $prefix = m::mock('UntypedParameter_prefix_');
    $set_table_names = m::mock('UntypedParameter_set_table_names_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('|[^a-z0-9_]|i', $prefix)) == false (line 883)
    // if (isset($this->base_prefix)) == false (line 889)
    // if ($set_table_names) == true (line 895)
    // if (\is_multisite() && empty($this->blogid)) == true (line 900)

    $actual = $this->wpdb->set_prefix($prefix, $set_table_names);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_prefix11()
{
    $prefix = m::mock('UntypedParameter_prefix_');
    $set_table_names = m::mock('UntypedParameter_set_table_names_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('|[^a-z0-9_]|i', $prefix)) == false (line 883)
    // if (isset($this->base_prefix)) == true (line 889)
    // if ($set_table_names) == false (line 895)

    $actual = $this->wpdb->set_prefix($prefix, $set_table_names);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_prefix12()
{
    $prefix = m::mock('UntypedParameter_prefix_');
    $set_table_names = m::mock('UntypedParameter_set_table_names_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('|[^a-z0-9_]|i', $prefix)) == false (line 883)
    // if (isset($this->base_prefix)) == true (line 889)
    // if ($set_table_names) == true (line 895)
    // if (\is_multisite() && empty($this->blogid)) == false (line 900)

    $actual = $this->wpdb->set_prefix($prefix, $set_table_names);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_prefix13()
{
    $prefix = m::mock('UntypedParameter_prefix_');
    $set_table_names = m::mock('UntypedParameter_set_table_names_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('|[^a-z0-9_]|i', $prefix)) == false (line 883)
    // if (isset($this->base_prefix)) == true (line 889)
    // if ($set_table_names) == true (line 895)
    // if (\is_multisite() && empty($this->blogid)) == false (line 900)

    $actual = $this->wpdb->set_prefix($prefix, $set_table_names);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_prefix14()
{
    $prefix = m::mock('UntypedParameter_prefix_');
    $set_table_names = m::mock('UntypedParameter_set_table_names_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('|[^a-z0-9_]|i', $prefix)) == false (line 883)
    // if (isset($this->base_prefix)) == true (line 889)
    // if ($set_table_names) == true (line 895)
    // if (\is_multisite() && empty($this->blogid)) == false (line 900)

    $actual = $this->wpdb->set_prefix($prefix, $set_table_names);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_prefix15()
{
    $prefix = m::mock('UntypedParameter_prefix_');
    $set_table_names = m::mock('UntypedParameter_set_table_names_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('|[^a-z0-9_]|i', $prefix)) == false (line 883)
    // if (isset($this->base_prefix)) == true (line 889)
    // if ($set_table_names) == true (line 895)
    // if (\is_multisite() && empty($this->blogid)) == false (line 900)

    $actual = $this->wpdb->set_prefix($prefix, $set_table_names);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_prefix16()
{
    $prefix = m::mock('UntypedParameter_prefix_');
    $set_table_names = m::mock('UntypedParameter_set_table_names_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('|[^a-z0-9_]|i', $prefix)) == false (line 883)
    // if (isset($this->base_prefix)) == true (line 889)
    // if ($set_table_names) == true (line 895)
    // if (\is_multisite() && empty($this->blogid)) == true (line 900)

    $actual = $this->wpdb->set_prefix($prefix, $set_table_names);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_prefix17()
{
    $prefix = m::mock('UntypedParameter_prefix_');
    $set_table_names = m::mock('UntypedParameter_set_table_names_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('|[^a-z0-9_]|i', $prefix)) == false (line 883)
    // if (isset($this->base_prefix)) == true (line 889)
    // if ($set_table_names) == true (line 895)
    // if (\is_multisite() && empty($this->blogid)) == false (line 900)

    $actual = $this->wpdb->set_prefix($prefix, $set_table_names);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_prefix18()
{
    $prefix = m::mock('UntypedParameter_prefix_');
    $set_table_names = m::mock('UntypedParameter_set_table_names_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('|[^a-z0-9_]|i', $prefix)) == false (line 883)
    // if (isset($this->base_prefix)) == true (line 889)
    // if ($set_table_names) == true (line 895)
    // if (\is_multisite() && empty($this->blogid)) == false (line 900)

    $actual = $this->wpdb->set_prefix($prefix, $set_table_names);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_prefix19()
{
    $prefix = m::mock('UntypedParameter_prefix_');
    $set_table_names = m::mock('UntypedParameter_set_table_names_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('|[^a-z0-9_]|i', $prefix)) == false (line 883)
    // if (isset($this->base_prefix)) == true (line 889)
    // if ($set_table_names) == true (line 895)
    // if (\is_multisite() && empty($this->blogid)) == false (line 900)

    $actual = $this->wpdb->set_prefix($prefix, $set_table_names);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_prefix20()
{
    $prefix = m::mock('UntypedParameter_prefix_');
    $set_table_names = m::mock('UntypedParameter_set_table_names_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('|[^a-z0-9_]|i', $prefix)) == false (line 883)
    // if (isset($this->base_prefix)) == true (line 889)
    // if ($set_table_names) == true (line 895)
    // if (\is_multisite() && empty($this->blogid)) == false (line 900)

    $actual = $this->wpdb->set_prefix($prefix, $set_table_names);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_prefix21()
{
    $prefix = m::mock('UntypedParameter_prefix_');
    $set_table_names = m::mock('UntypedParameter_set_table_names_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('|[^a-z0-9_]|i', $prefix)) == false (line 883)
    // if (isset($this->base_prefix)) == true (line 889)
    // if ($set_table_names) == true (line 895)
    // if (\is_multisite() && empty($this->blogid)) == true (line 900)

    $actual = $this->wpdb->set_prefix($prefix, $set_table_names);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_prefix22()
{
    $prefix = m::mock('UntypedParameter_prefix_');
    $set_table_names = m::mock('UntypedParameter_set_table_names_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('|[^a-z0-9_]|i', $prefix)) == true (line 883)

    $actual = $this->wpdb->set_prefix($prefix, $set_table_names);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_blog_id0()
{
    $blog_id = m::mock('UntypedParameter_blog_id_');
    $network_id = m::mock('UntypedParameter_network_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!empty($network_id)) == false (line 927)

    $actual = $this->wpdb->set_blog_id($blog_id, $network_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_blog_id1()
{
    $blog_id = m::mock('UntypedParameter_blog_id_');
    $network_id = m::mock('UntypedParameter_network_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!empty($network_id)) == false (line 927)

    $actual = $this->wpdb->set_blog_id($blog_id, $network_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_blog_id2()
{
    $blog_id = m::mock('UntypedParameter_blog_id_');
    $network_id = m::mock('UntypedParameter_network_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!empty($network_id)) == false (line 927)

    $actual = $this->wpdb->set_blog_id($blog_id, $network_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_blog_id3()
{
    $blog_id = m::mock('UntypedParameter_blog_id_');
    $network_id = m::mock('UntypedParameter_network_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!empty($network_id)) == false (line 927)

    $actual = $this->wpdb->set_blog_id($blog_id, $network_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_blog_id4()
{
    $blog_id = m::mock('UntypedParameter_blog_id_');
    $network_id = m::mock('UntypedParameter_network_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!empty($network_id)) == true (line 927)

    $actual = $this->wpdb->set_blog_id($blog_id, $network_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_blog_id5()
{
    $blog_id = m::mock('UntypedParameter_blog_id_');
    $network_id = m::mock('UntypedParameter_network_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!empty($network_id)) == true (line 927)

    $actual = $this->wpdb->set_blog_id($blog_id, $network_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_blog_id6()
{
    $blog_id = m::mock('UntypedParameter_blog_id_');
    $network_id = m::mock('UntypedParameter_network_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!empty($network_id)) == true (line 927)

    $actual = $this->wpdb->set_blog_id($blog_id, $network_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSet_blog_id7()
{
    $blog_id = m::mock('UntypedParameter_blog_id_');
    $network_id = m::mock('UntypedParameter_network_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!empty($network_id)) == true (line 927)

    $actual = $this->wpdb->set_blog_id($blog_id, $network_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_blog_prefix0()
{
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_multisite()) == false (line 955)

    $actual = $this->wpdb->get_blog_prefix($blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_blog_prefix1()
{
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_multisite()) == true (line 955)
    // if (\null === $blog_id) == false (line 956)
    // if (\defined('MULTISITE') && (0 == $blog_id || 1 == $blog_id)) == false (line 960)

    $actual = $this->wpdb->get_blog_prefix($blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_blog_prefix2()
{
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_multisite()) == true (line 955)
    // if (\null === $blog_id) == false (line 956)
    // if (\defined('MULTISITE') && (0 == $blog_id || 1 == $blog_id)) == true (line 960)

    $actual = $this->wpdb->get_blog_prefix($blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_blog_prefix3()
{
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_multisite()) == true (line 955)
    // if (\null === $blog_id) == true (line 956)
    // if (\defined('MULTISITE') && (0 == $blog_id || 1 == $blog_id)) == false (line 960)

    $actual = $this->wpdb->get_blog_prefix($blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_blog_prefix4()
{
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_multisite()) == true (line 955)
    // if (\null === $blog_id) == true (line 956)
    // if (\defined('MULTISITE') && (0 == $blog_id || 1 == $blog_id)) == true (line 960)

    $actual = $this->wpdb->get_blog_prefix($blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables0()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == false (line 1017)
    // Default (line 1020)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables1()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == false (line 1024)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables2()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables3()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables4()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables5()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables6()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables7()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables8()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables9()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables10()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables11()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables12()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables13()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables14()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables15()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables16()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables17()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables18()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables19()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables20()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables21()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables22()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables23()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables24()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables25()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == false (line 1014)
    // Case 'old' == true (line 1017)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables26()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == false (line 1024)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables27()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables28()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables29()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables30()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables31()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables32()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables33()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables34()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables35()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables36()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables37()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables38()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables39()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables40()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables41()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables42()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables43()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables44()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables45()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables46()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables47()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables48()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables49()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables50()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == false (line 1008)
    // Case 'ms_global' == true (line 1014)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables51()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == false (line 1024)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables52()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables53()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables54()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables55()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables56()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables57()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables58()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables59()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables60()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables61()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables62()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables63()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables64()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables65()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables66()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables67()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables68()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables69()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables70()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables71()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables72()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables73()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables74()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables75()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == false (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables76()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == false (line 1024)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables77()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables78()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables79()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables80()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables81()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables82()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables83()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables84()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables85()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables86()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables87()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables88()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables89()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables90()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables91()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables92()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables93()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables94()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables95()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables96()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables97()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables98()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables99()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables100()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == false (line 1005)
    // Case 'global' == true (line 1008)
    // if (\is_multisite()) == true (line 1010)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables101()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == false (line 1024)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables102()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables103()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables104()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables105()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables106()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables107()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables108()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables109()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables110()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables111()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables112()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables113()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables114()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables115()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables116()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables117()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables118()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables119()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables120()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables121()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables122()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables123()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables124()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables125()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == false (line 999)
    // Case 'blog' == true (line 1005)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables126()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == false (line 1024)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables127()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables128()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables129()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables130()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables131()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables132()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables133()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables134()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables135()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables136()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables137()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables138()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables139()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables140()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables141()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables142()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables143()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables144()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables145()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables146()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables147()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables148()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables149()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables150()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == false (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables151()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == false (line 1024)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables152()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables153()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables154()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables155()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables156()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables157()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables158()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables159()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables160()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables161()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables162()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables163()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == false (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables164()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables165()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables166()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables167()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables168()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables169()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables170()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables171()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == false (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables172()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables173()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == false (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables174()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == false (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTables175()
{
    $scope = m::mock('UntypedParameter_scope_');
    $prefix = m::mock('UntypedParameter_prefix_');
    $blog_id = m::mock('UntypedParameter_blog_id_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch ($scope) (line 998)
    // Case 'all' == true (line 999)
    // if (\is_multisite()) == true (line 1001)
    // if ($prefix) == true (line 1024)
    // if (!$blog_id) == true (line 1025)
    // if (\in_array($table, $global_tables)) == true (line 1032)
    // if (isset($tables['users']) && \defined('CUSTOM_USER_TABLE')) == true (line 1040)
    // if (isset($tables['usermeta']) && \defined('CUSTOM_USER_META_TABLE')) == true (line 1044)

    $actual = $this->wpdb->tables($scope, $prefix, $blog_id);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSelect0()
{
    $db = m::mock('UntypedParameter_db_');
    $dbh = m::mock('UntypedParameter_dbh_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($dbh)) == false (line 1064)
    // if ($this->use_mysqli) == false (line 1068)
    // if (!$success) == false (line 1073)

    $actual = $this->wpdb->select($db, $dbh);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSelect1()
{
    $db = m::mock('UntypedParameter_db_');
    $dbh = m::mock('UntypedParameter_dbh_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($dbh)) == false (line 1064)
    // if ($this->use_mysqli) == false (line 1068)
    // if (!$success) == true (line 1073)
    // if (!\did_action('template_redirect')) == false (line 1075)

    $actual = $this->wpdb->select($db, $dbh);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSelect2()
{
    $db = m::mock('UntypedParameter_db_');
    $dbh = m::mock('UntypedParameter_dbh_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($dbh)) == false (line 1064)
    // if ($this->use_mysqli) == false (line 1068)
    // if (!$success) == true (line 1073)
    // if (!\did_action('template_redirect')) == true (line 1075)

    $actual = $this->wpdb->select($db, $dbh);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSelect3()
{
    $db = m::mock('UntypedParameter_db_');
    $dbh = m::mock('UntypedParameter_dbh_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($dbh)) == false (line 1064)
    // if ($this->use_mysqli) == true (line 1068)
    // if (!$success) == false (line 1073)

    $actual = $this->wpdb->select($db, $dbh);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSelect4()
{
    $db = m::mock('UntypedParameter_db_');
    $dbh = m::mock('UntypedParameter_dbh_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($dbh)) == false (line 1064)
    // if ($this->use_mysqli) == true (line 1068)
    // if (!$success) == true (line 1073)
    // if (!\did_action('template_redirect')) == false (line 1075)

    $actual = $this->wpdb->select($db, $dbh);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSelect5()
{
    $db = m::mock('UntypedParameter_db_');
    $dbh = m::mock('UntypedParameter_dbh_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($dbh)) == false (line 1064)
    // if ($this->use_mysqli) == true (line 1068)
    // if (!$success) == true (line 1073)
    // if (!\did_action('template_redirect')) == true (line 1075)

    $actual = $this->wpdb->select($db, $dbh);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSelect6()
{
    $db = m::mock('UntypedParameter_db_');
    $dbh = m::mock('UntypedParameter_dbh_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($dbh)) == true (line 1064)
    // if ($this->use_mysqli) == false (line 1068)
    // if (!$success) == false (line 1073)

    $actual = $this->wpdb->select($db, $dbh);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSelect7()
{
    $db = m::mock('UntypedParameter_db_');
    $dbh = m::mock('UntypedParameter_dbh_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($dbh)) == true (line 1064)
    // if ($this->use_mysqli) == false (line 1068)
    // if (!$success) == true (line 1073)
    // if (!\did_action('template_redirect')) == false (line 1075)

    $actual = $this->wpdb->select($db, $dbh);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSelect8()
{
    $db = m::mock('UntypedParameter_db_');
    $dbh = m::mock('UntypedParameter_dbh_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($dbh)) == true (line 1064)
    // if ($this->use_mysqli) == false (line 1068)
    // if (!$success) == true (line 1073)
    // if (!\did_action('template_redirect')) == true (line 1075)

    $actual = $this->wpdb->select($db, $dbh);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSelect9()
{
    $db = m::mock('UntypedParameter_db_');
    $dbh = m::mock('UntypedParameter_dbh_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($dbh)) == true (line 1064)
    // if ($this->use_mysqli) == true (line 1068)
    // if (!$success) == false (line 1073)

    $actual = $this->wpdb->select($db, $dbh);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSelect10()
{
    $db = m::mock('UntypedParameter_db_');
    $dbh = m::mock('UntypedParameter_dbh_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($dbh)) == true (line 1064)
    // if ($this->use_mysqli) == true (line 1068)
    // if (!$success) == true (line 1073)
    // if (!\did_action('template_redirect')) == false (line 1075)

    $actual = $this->wpdb->select($db, $dbh);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSelect11()
{
    $db = m::mock('UntypedParameter_db_');
    $dbh = m::mock('UntypedParameter_dbh_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($dbh)) == true (line 1064)
    // if ($this->use_mysqli) == true (line 1068)
    // if (!$success) == true (line 1073)
    // if (!\did_action('template_redirect')) == true (line 1075)

    $actual = $this->wpdb->select($db, $dbh);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function test_weak_escape0()
{
    $string = m::mock('UntypedParameter_string_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\func_num_args() === 1 && \function_exists('_deprecated_function')) == false (line 1129)

    $actual = $this->wpdb->_weak_escape($string);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function test_weak_escape1()
{
    $string = m::mock('UntypedParameter_string_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\func_num_args() === 1 && \function_exists('_deprecated_function')) == true (line 1129)

    $actual = $this->wpdb->_weak_escape($string);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function test_real_escape0()
{
    $string = m::mock('UntypedParameter_string_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->dbh) == false (line 1146)
    // if (\function_exists('__')) == false (line 1154)

    $actual = $this->wpdb->_real_escape($string);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function test_real_escape1()
{
    $string = m::mock('UntypedParameter_string_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->dbh) == false (line 1146)
    // if (\function_exists('__')) == true (line 1154)

    $actual = $this->wpdb->_real_escape($string);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function test_real_escape2()
{
    $string = m::mock('UntypedParameter_string_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->dbh) == true (line 1146)
    // if ($this->use_mysqli) == false (line 1147)

    $actual = $this->wpdb->_real_escape($string);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function test_real_escape3()
{
    $string = m::mock('UntypedParameter_string_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->dbh) == true (line 1146)
    // if ($this->use_mysqli) == true (line 1147)

    $actual = $this->wpdb->_real_escape($string);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function test_escape0()
{
    $data = m::mock('UntypedParameter_data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_array($data)) == false (line 1176)

    $actual = $this->wpdb->_escape($data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function test_escape1()
{
    $data = m::mock('UntypedParameter_data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_array($data)) == true (line 1176)

    $actual = $this->wpdb->_escape($data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function test_escape2()
{
    $data = m::mock('UntypedParameter_data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_array($data)) == true (line 1176)
    // if (\is_array($v)) == false (line 1178)

    $actual = $this->wpdb->_escape($data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function test_escape3()
{
    $data = m::mock('UntypedParameter_data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_array($data)) == true (line 1176)
    // if (\is_array($v)) == true (line 1178)

    $actual = $this->wpdb->_escape($data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEscape0()
{
    $data = m::mock('UntypedParameter_data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\func_num_args() === 1 && \function_exists('_deprecated_function')) == false (line 1205)
    // if (\is_array($data)) == false (line 1208)

    $actual = $this->wpdb->escape($data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEscape1()
{
    $data = m::mock('UntypedParameter_data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\func_num_args() === 1 && \function_exists('_deprecated_function')) == false (line 1205)
    // if (\is_array($data)) == true (line 1208)

    $actual = $this->wpdb->escape($data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEscape2()
{
    $data = m::mock('UntypedParameter_data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\func_num_args() === 1 && \function_exists('_deprecated_function')) == false (line 1205)
    // if (\is_array($data)) == true (line 1208)
    // if (\is_array($v)) == false (line 1210)

    $actual = $this->wpdb->escape($data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEscape3()
{
    $data = m::mock('UntypedParameter_data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\func_num_args() === 1 && \function_exists('_deprecated_function')) == false (line 1205)
    // if (\is_array($data)) == true (line 1208)
    // if (\is_array($v)) == true (line 1210)

    $actual = $this->wpdb->escape($data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEscape4()
{
    $data = m::mock('UntypedParameter_data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\func_num_args() === 1 && \function_exists('_deprecated_function')) == true (line 1205)
    // if (\is_array($data)) == false (line 1208)

    $actual = $this->wpdb->escape($data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEscape5()
{
    $data = m::mock('UntypedParameter_data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\func_num_args() === 1 && \function_exists('_deprecated_function')) == true (line 1205)
    // if (\is_array($data)) == true (line 1208)

    $actual = $this->wpdb->escape($data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEscape6()
{
    $data = m::mock('UntypedParameter_data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\func_num_args() === 1 && \function_exists('_deprecated_function')) == true (line 1205)
    // if (\is_array($data)) == true (line 1208)
    // if (\is_array($v)) == false (line 1210)

    $actual = $this->wpdb->escape($data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEscape7()
{
    $data = m::mock('UntypedParameter_data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\func_num_args() === 1 && \function_exists('_deprecated_function')) == true (line 1205)
    // if (\is_array($data)) == true (line 1208)
    // if (\is_array($v)) == true (line 1210)

    $actual = $this->wpdb->escape($data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEscape_by_ref0()
{
    $string = m::mock('UntypedParameter_string_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_float($string)) == false (line 1233)

    $actual = $this->wpdb->escape_by_ref($string);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEscape_by_ref1()
{
    $string = m::mock('UntypedParameter_string_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_float($string)) == true (line 1233)

    $actual = $this->wpdb->escape_by_ref($string);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare0()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == false (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == false (line 1287)
    // if (\count($args) !== $placeholders) == false (line 1328)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare1()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == false (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == false (line 1287)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == false (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare2()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == false (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == false (line 1287)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == true (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare3()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == false (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == false (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == false (line 1293)
    // if (\count($args) !== $placeholders) == false (line 1328)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare4()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == false (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == false (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == false (line 1293)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == false (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare5()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == false (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == false (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == false (line 1293)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == true (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare6()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == false (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == false (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == true (line 1293)
    // if (\count($args) !== $placeholders) == false (line 1328)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare7()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == false (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == false (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == true (line 1293)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == false (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare8()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == false (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == false (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == true (line 1293)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == true (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare9()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == false (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == true (line 1287)
    // if (\count($args) !== $placeholders) == false (line 1328)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare10()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == false (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == true (line 1287)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == false (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare11()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == false (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == true (line 1287)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == true (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare12()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == false (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == true (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == false (line 1293)
    // if (\count($args) !== $placeholders) == false (line 1328)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare13()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == false (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == true (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == false (line 1293)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == false (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare14()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == false (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == true (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == false (line 1293)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == true (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare15()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == false (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == true (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == true (line 1293)
    // if (\count($args) !== $placeholders) == false (line 1328)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare16()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == false (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == true (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == true (line 1293)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == false (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare17()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == false (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == true (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == true (line 1293)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == true (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare18()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == true (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == false (line 1287)
    // if (\count($args) !== $placeholders) == false (line 1328)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare19()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == true (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == false (line 1287)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == false (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare20()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == true (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == false (line 1287)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == true (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare21()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == true (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == false (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == false (line 1293)
    // if (\count($args) !== $placeholders) == false (line 1328)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare22()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == true (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == false (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == false (line 1293)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == false (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare23()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == true (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == false (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == false (line 1293)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == true (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare24()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == true (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == false (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == true (line 1293)
    // if (\count($args) !== $placeholders) == false (line 1328)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare25()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == true (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == false (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == true (line 1293)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == false (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare26()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == true (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == false (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == true (line 1293)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == true (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare27()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == true (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == true (line 1287)
    // if (\count($args) !== $placeholders) == false (line 1328)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare28()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == true (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == true (line 1287)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == false (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare29()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == true (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == true (line 1287)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == true (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare30()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == true (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == true (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == false (line 1293)
    // if (\count($args) !== $placeholders) == false (line 1328)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare31()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == true (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == true (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == false (line 1293)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == false (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare32()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == true (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == true (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == false (line 1293)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == true (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare33()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == true (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == true (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == true (line 1293)
    // if (\count($args) !== $placeholders) == false (line 1328)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare34()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == true (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == true (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == true (line 1293)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == false (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare35()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == false (line 1272)
    // if (\strpos($query, '%') === \false) == true (line 1277)
    // if (\is_array($args[0]) && \count($args) == 1) == true (line 1287)
    // if (!\is_scalar($arg) && !\is_null($arg)) == true (line 1293)
    // if (\count($args) !== $placeholders) == true (line 1328)
    // if (1 === $placeholders && $passed_as_array) == true (line 1329)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrepare36()
{
    $query = m::mock('UntypedParameter_query_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_null($query)) == true (line 1272)

    $actual = $this->wpdb->prepare($query, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEsc_like0()
{
    $text = m::mock('UntypedParameter_text_');

    // TODO: Your mock expectations here

    $actual = $this->wpdb->esc_like($text);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error0()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == false (line 1399)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == false (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == false (line 1433)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error1()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == false (line 1399)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == false (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == false (line 1441)
    // if (\defined('DIEONDBERROR')) == false (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error2()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == false (line 1399)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == false (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == false (line 1441)
    // if (\defined('DIEONDBERROR')) == true (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error3()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == false (line 1399)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == false (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == true (line 1441)
    // if (\defined('DIEONDBERROR')) == false (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error4()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == false (line 1399)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == false (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == true (line 1441)
    // if (\defined('DIEONDBERROR')) == true (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error5()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == false (line 1399)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == false (line 1417)
    // if (!$this->show_errors) == true (line 1428)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error6()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == false (line 1399)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == true (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == false (line 1433)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error7()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == false (line 1399)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == true (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == false (line 1441)
    // if (\defined('DIEONDBERROR')) == false (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error8()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == false (line 1399)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == true (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == false (line 1441)
    // if (\defined('DIEONDBERROR')) == true (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error9()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == false (line 1399)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == true (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == true (line 1441)
    // if (\defined('DIEONDBERROR')) == false (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error10()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == false (line 1399)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == true (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == true (line 1441)
    // if (\defined('DIEONDBERROR')) == true (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error11()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == false (line 1399)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == true (line 1417)
    // if (!$this->show_errors) == true (line 1428)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error12()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == false (line 1399)
    // if ($this->suppress_errors) == true (line 1411)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error13()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == false (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == false (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == false (line 1433)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error14()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == false (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == false (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == false (line 1441)
    // if (\defined('DIEONDBERROR')) == false (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error15()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == false (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == false (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == false (line 1441)
    // if (\defined('DIEONDBERROR')) == true (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error16()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == false (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == false (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == true (line 1441)
    // if (\defined('DIEONDBERROR')) == false (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error17()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == false (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == false (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == true (line 1441)
    // if (\defined('DIEONDBERROR')) == true (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error18()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == false (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == false (line 1417)
    // if (!$this->show_errors) == true (line 1428)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error19()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == false (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == true (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == false (line 1433)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error20()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == false (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == true (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == false (line 1441)
    // if (\defined('DIEONDBERROR')) == false (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error21()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == false (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == true (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == false (line 1441)
    // if (\defined('DIEONDBERROR')) == true (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error22()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == false (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == true (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == true (line 1441)
    // if (\defined('DIEONDBERROR')) == false (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error23()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == false (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == true (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == true (line 1441)
    // if (\defined('DIEONDBERROR')) == true (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error24()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == false (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == true (line 1417)
    // if (!$this->show_errors) == true (line 1428)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error25()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == false (line 1400)
    // if ($this->suppress_errors) == true (line 1411)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error26()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == true (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == false (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == false (line 1433)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error27()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == true (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == false (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == false (line 1441)
    // if (\defined('DIEONDBERROR')) == false (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error28()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == true (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == false (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == false (line 1441)
    // if (\defined('DIEONDBERROR')) == true (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error29()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == true (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == false (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == true (line 1441)
    // if (\defined('DIEONDBERROR')) == false (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error30()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == true (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == false (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == true (line 1441)
    // if (\defined('DIEONDBERROR')) == true (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error31()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == true (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == false (line 1417)
    // if (!$this->show_errors) == true (line 1428)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error32()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == true (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == true (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == false (line 1433)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error33()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == true (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == true (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == false (line 1441)
    // if (\defined('DIEONDBERROR')) == false (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error34()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == true (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == true (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == false (line 1441)
    // if (\defined('DIEONDBERROR')) == true (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error35()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == true (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == true (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == true (line 1441)
    // if (\defined('DIEONDBERROR')) == false (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error36()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == true (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == true (line 1417)
    // if (!$this->show_errors) == false (line 1428)
    // if (\is_multisite()) == true (line 1433)
    // if (\defined('ERRORLOGFILE')) == true (line 1441)
    // if (\defined('DIEONDBERROR')) == true (line 1444)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error37()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == true (line 1400)
    // if ($this->suppress_errors) == false (line 1411)
    // if ($caller = $this->get_caller()) == true (line 1417)
    // if (!$this->show_errors) == true (line 1428)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPrint_error38()
{
    $str = m::mock('UntypedParameter_str_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$str) == true (line 1399)
    // if ($this->use_mysqli) == true (line 1400)
    // if ($this->suppress_errors) == true (line 1411)

    $actual = $this->wpdb->print_error($str);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testShow_errors0()
{
    $show = m::mock('UntypedParameter_show_');

    // TODO: Your mock expectations here

    $actual = $this->wpdb->show_errors($show);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testHide_errors0()
{
    // TODO: Your mock expectations here

    $actual = $this->wpdb->hide_errors();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSuppress_errors0()
{
    $suppress = m::mock('UntypedParameter_suppress_');

    // TODO: Your mock expectations here

    $actual = $this->wpdb->suppress_errors($suppress);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testFlush0()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1525)
    // if (\is_resource($this->result)) == false (line 1538)

    $actual = $this->wpdb->flush();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testFlush1()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1525)
    // if (\is_resource($this->result)) == true (line 1538)

    $actual = $this->wpdb->flush();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testFlush2()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1525)
    // if (empty($this->dbh) || !$this->dbh instanceof \mysqli) == false (line 1530)
    // while (\mysqli_more_results($this->dbh)) == false (line 1535)

    $actual = $this->wpdb->flush();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testFlush3()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1525)
    // if (empty($this->dbh) || !$this->dbh instanceof \mysqli) == false (line 1530)
    // while (\mysqli_more_results($this->dbh)) == true (line 1535)
    // while (\mysqli_more_results($this->dbh)) == false (line 1535)

    $actual = $this->wpdb->flush();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testFlush4()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1525)
    // if (empty($this->dbh) || !$this->dbh instanceof \mysqli) == true (line 1530)

    $actual = $this->wpdb->flush();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect0()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1565)
    // if (\WP_DEBUG) == false (line 1618)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect1()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1565)
    // if (\WP_DEBUG) == false (line 1618)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect2()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1565)
    // if (\WP_DEBUG) == false (line 1618)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect3()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1565)
    // if (\WP_DEBUG) == false (line 1618)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect4()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1565)
    // if (\WP_DEBUG) == false (line 1618)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect5()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1565)
    // if (\WP_DEBUG) == true (line 1618)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect6()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1565)
    // if (\WP_DEBUG) == true (line 1618)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect7()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1565)
    // if (\WP_DEBUG) == true (line 1618)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect8()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1565)
    // if (\WP_DEBUG) == true (line 1618)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect9()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1565)
    // if (\WP_DEBUG) == true (line 1618)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect10()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect11()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect12()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect13()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect14()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect15()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect16()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect17()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect18()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect19()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect20()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect21()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect22()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect23()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect24()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect25()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect26()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect27()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect28()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect29()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect30()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect31()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect32()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect33()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect34()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect35()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect36()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect37()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect38()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect39()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect40()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect41()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect42()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect43()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect44()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect45()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect46()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect47()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect48()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect49()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect50()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect51()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect52()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect53()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect54()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect55()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect56()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect57()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect58()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect59()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect60()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect61()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect62()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect63()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect64()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect65()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect66()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect67()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect68()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect69()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect70()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect71()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect72()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect73()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect74()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect75()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect76()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect77()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect78()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect79()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect80()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect81()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect82()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect83()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect84()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect85()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect86()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect87()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect88()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect89()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect90()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect91()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect92()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect93()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect94()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect95()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect96()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect97()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect98()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect99()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect100()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect101()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect102()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect103()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect104()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect105()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect106()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect107()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect108()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect109()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect110()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect111()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect112()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect113()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect114()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect115()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect116()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect117()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect118()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect119()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect120()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect121()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect122()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect123()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect124()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect125()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == false (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect126()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect127()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect128()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect129()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect130()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect131()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect132()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect133()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect134()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect135()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect136()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect137()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect138()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect139()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect140()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect141()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect142()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect143()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect144()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect145()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect146()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect147()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect148()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect149()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect150()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect151()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect152()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect153()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect154()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect155()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect156()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect157()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect158()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect159()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect160()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect161()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect162()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect163()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect164()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect165()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect166()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect167()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect168()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect169()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect170()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect171()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect172()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect173()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect174()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect175()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect176()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect177()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect178()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect179()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect180()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect181()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect182()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect183()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == false (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect184()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect185()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect186()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect187()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect188()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect189()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect190()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect191()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect192()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect193()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect194()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect195()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect196()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect197()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect198()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect199()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect200()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect201()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect202()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect203()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect204()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect205()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect206()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect207()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect208()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect209()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect210()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect211()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect212()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == false (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect213()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect214()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect215()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect216()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect217()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == false (line 1593)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect218()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect219()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect220()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect221()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect222()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect223()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == false (line 1608)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect224()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect225()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect226()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect227()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect228()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect229()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == false (line 1606)
    // if (!\function_exists('mysql_connect')) == true (line 1608)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect230()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect231()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect232()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect233()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect234()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect235()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == false (line 1604)
    // if (\defined('WP_USE_EXT_MYSQL') && !\WP_USE_EXT_MYSQL) == true (line 1606)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect236()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == false (line 1658)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect237()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == false (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect238()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == false (line 1625)
    // if ($this->dbh) == true (line 1658)
    // if (!$this->has_connected) == true (line 1659)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect239()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == false (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect240()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == false (line 1612)
    // if (!$this->dbh && $allow_bail) == true (line 1625)
    // if (\file_exists(\WP_CONTENT_DIR . '/db-error.php')) == true (line 1629)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_connect241()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1565)
    // if ($host_data = $this->parse_db_host($this->dbhost)) == true (line 1573)
    // if ($is_ipv6 && \extension_loaded('mysqlnd')) == true (line 1583)
    // if (\WP_DEBUG) == true (line 1587)
    // if ($this->dbh->connect_errno) == true (line 1593)
    // if ($this->has_connected) == true (line 1604)
    // if ($attempt_fallback) == true (line 1612)

    $actual = $this->wpdb->db_connect($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse_db_host0()
{
    $host = m::mock('UntypedParameter_host_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($socket_pos !== \false) == false (line 1698)
    // if (\substr_count($host, ':') > 1) == false (line 1705)
    // if (1 !== $result) == false (line 1716)

    $actual = $this->wpdb->parse_db_host($host);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse_db_host1()
{
    $host = m::mock('UntypedParameter_host_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($socket_pos !== \false) == false (line 1698)
    // if (\substr_count($host, ':') > 1) == false (line 1705)
    // if (1 !== $result) == false (line 1716)
    // if (!empty($matches[$component])) == false (line 1723)

    $actual = $this->wpdb->parse_db_host($host);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse_db_host2()
{
    $host = m::mock('UntypedParameter_host_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($socket_pos !== \false) == false (line 1698)
    // if (\substr_count($host, ':') > 1) == false (line 1705)
    // if (1 !== $result) == false (line 1716)
    // if (!empty($matches[$component])) == true (line 1723)

    $actual = $this->wpdb->parse_db_host($host);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse_db_host3()
{
    $host = m::mock('UntypedParameter_host_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($socket_pos !== \false) == false (line 1698)
    // if (\substr_count($host, ':') > 1) == false (line 1705)
    // if (1 !== $result) == true (line 1716)

    $actual = $this->wpdb->parse_db_host($host);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse_db_host4()
{
    $host = m::mock('UntypedParameter_host_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($socket_pos !== \false) == false (line 1698)
    // if (\substr_count($host, ':') > 1) == true (line 1705)
    // if (1 !== $result) == false (line 1716)

    $actual = $this->wpdb->parse_db_host($host);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse_db_host5()
{
    $host = m::mock('UntypedParameter_host_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($socket_pos !== \false) == false (line 1698)
    // if (\substr_count($host, ':') > 1) == true (line 1705)
    // if (1 !== $result) == false (line 1716)
    // if (!empty($matches[$component])) == false (line 1723)

    $actual = $this->wpdb->parse_db_host($host);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse_db_host6()
{
    $host = m::mock('UntypedParameter_host_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($socket_pos !== \false) == false (line 1698)
    // if (\substr_count($host, ':') > 1) == true (line 1705)
    // if (1 !== $result) == false (line 1716)
    // if (!empty($matches[$component])) == true (line 1723)

    $actual = $this->wpdb->parse_db_host($host);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse_db_host7()
{
    $host = m::mock('UntypedParameter_host_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($socket_pos !== \false) == false (line 1698)
    // if (\substr_count($host, ':') > 1) == true (line 1705)
    // if (1 !== $result) == true (line 1716)

    $actual = $this->wpdb->parse_db_host($host);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse_db_host8()
{
    $host = m::mock('UntypedParameter_host_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($socket_pos !== \false) == true (line 1698)
    // if (\substr_count($host, ':') > 1) == false (line 1705)
    // if (1 !== $result) == false (line 1716)

    $actual = $this->wpdb->parse_db_host($host);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse_db_host9()
{
    $host = m::mock('UntypedParameter_host_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($socket_pos !== \false) == true (line 1698)
    // if (\substr_count($host, ':') > 1) == false (line 1705)
    // if (1 !== $result) == false (line 1716)
    // if (!empty($matches[$component])) == false (line 1723)

    $actual = $this->wpdb->parse_db_host($host);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse_db_host10()
{
    $host = m::mock('UntypedParameter_host_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($socket_pos !== \false) == true (line 1698)
    // if (\substr_count($host, ':') > 1) == false (line 1705)
    // if (1 !== $result) == false (line 1716)
    // if (!empty($matches[$component])) == true (line 1723)

    $actual = $this->wpdb->parse_db_host($host);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse_db_host11()
{
    $host = m::mock('UntypedParameter_host_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($socket_pos !== \false) == true (line 1698)
    // if (\substr_count($host, ':') > 1) == false (line 1705)
    // if (1 !== $result) == true (line 1716)

    $actual = $this->wpdb->parse_db_host($host);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse_db_host12()
{
    $host = m::mock('UntypedParameter_host_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($socket_pos !== \false) == true (line 1698)
    // if (\substr_count($host, ':') > 1) == true (line 1705)
    // if (1 !== $result) == false (line 1716)

    $actual = $this->wpdb->parse_db_host($host);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse_db_host13()
{
    $host = m::mock('UntypedParameter_host_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($socket_pos !== \false) == true (line 1698)
    // if (\substr_count($host, ':') > 1) == true (line 1705)
    // if (1 !== $result) == false (line 1716)
    // if (!empty($matches[$component])) == false (line 1723)

    $actual = $this->wpdb->parse_db_host($host);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse_db_host14()
{
    $host = m::mock('UntypedParameter_host_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($socket_pos !== \false) == true (line 1698)
    // if (\substr_count($host, ':') > 1) == true (line 1705)
    // if (1 !== $result) == false (line 1716)
    // if (!empty($matches[$component])) == true (line 1723)

    $actual = $this->wpdb->parse_db_host($host);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse_db_host15()
{
    $host = m::mock('UntypedParameter_host_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($socket_pos !== \false) == true (line 1698)
    // if (\substr_count($host, ':') > 1) == true (line 1705)
    // if (1 !== $result) == true (line 1716)

    $actual = $this->wpdb->parse_db_host($host);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection0()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == false (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection1()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == true (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection2()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == true (line 1784)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection3()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == false (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == false (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection4()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == false (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == true (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection5()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == false (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == true (line 1784)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection6()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == false (line 1767)
    // if ($this->db_connect(\false)) == true (line 1771)
    // if ($error_reporting) == false (line 1772)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection7()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == false (line 1767)
    // if ($this->db_connect(\false)) == true (line 1771)
    // if ($error_reporting) == true (line 1772)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection8()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == true (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == false (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection9()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == true (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == true (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection10()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == true (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == true (line 1784)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection11()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == true (line 1767)
    // if ($this->db_connect(\false)) == true (line 1771)
    // if ($error_reporting) == false (line 1772)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection12()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == true (line 1767)
    // if ($this->db_connect(\false)) == true (line 1771)
    // if ($error_reporting) == true (line 1772)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection13()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == false (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection14()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == true (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection15()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == true (line 1784)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection16()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == false (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == false (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection17()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == false (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == true (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection18()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == false (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == true (line 1784)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection19()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == false (line 1767)
    // if ($this->db_connect(\false)) == true (line 1771)
    // if ($error_reporting) == false (line 1772)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection20()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == false (line 1767)
    // if ($this->db_connect(\false)) == true (line 1771)
    // if ($error_reporting) == true (line 1772)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection21()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == true (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == false (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection22()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == true (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == true (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection23()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == true (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == true (line 1784)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection24()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == true (line 1767)
    // if ($this->db_connect(\false)) == true (line 1771)
    // if ($error_reporting) == false (line 1772)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection25()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == false (line 1751)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == true (line 1767)
    // if ($this->db_connect(\false)) == true (line 1771)
    // if ($error_reporting) == true (line 1772)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection26()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 1746)
    // if (!empty($this->dbh) && \mysql_ping($this->dbh)) == true (line 1751)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection27()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == false (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection28()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == true (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection29()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == true (line 1784)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection30()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == false (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == false (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection31()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == false (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == true (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection32()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == false (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == true (line 1784)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection33()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == false (line 1767)
    // if ($this->db_connect(\false)) == true (line 1771)
    // if ($error_reporting) == false (line 1772)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection34()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == false (line 1767)
    // if ($this->db_connect(\false)) == true (line 1771)
    // if ($error_reporting) == true (line 1772)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection35()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == true (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == false (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection36()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == true (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == true (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection37()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == true (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == true (line 1784)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection38()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == true (line 1767)
    // if ($this->db_connect(\false)) == true (line 1771)
    // if ($error_reporting) == false (line 1772)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection39()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == false (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == true (line 1767)
    // if ($this->db_connect(\false)) == true (line 1771)
    // if ($error_reporting) == true (line 1772)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection40()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == false (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection41()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == true (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection42()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == true (line 1784)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection43()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == false (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == false (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection44()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == false (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == true (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection45()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == false (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == true (line 1784)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection46()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == false (line 1767)
    // if ($this->db_connect(\false)) == true (line 1771)
    // if ($error_reporting) == false (line 1772)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection47()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == false (line 1767)
    // if ($this->db_connect(\false)) == true (line 1771)
    // if ($error_reporting) == true (line 1772)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection48()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == true (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == false (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection49()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == true (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == false (line 1784)
    // if (!$allow_bail) == true (line 1788)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection50()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == true (line 1767)
    // if ($this->db_connect(\false)) == false (line 1771)
    // for (...) == false (line 1764)
    // if (\did_action('template_redirect')) == true (line 1784)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection51()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == true (line 1767)
    // if ($this->db_connect(\false)) == true (line 1771)
    // if ($error_reporting) == false (line 1772)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection52()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == false (line 1747)
    // if (\WP_DEBUG) == true (line 1759)
    // for (...) == true (line 1764)
    // if ($this->reconnect_retries === $tries && \WP_DEBUG) == true (line 1767)
    // if ($this->db_connect(\false)) == true (line 1771)
    // if ($error_reporting) == true (line 1772)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_connection53()
{
    $allow_bail = m::mock('UntypedParameter_allow_bail_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 1746)
    // if (!empty($this->dbh) && \mysqli_ping($this->dbh)) == true (line 1747)

    $actual = $this->wpdb->check_connection($allow_bail);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery0()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery2()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery3()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery4()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery5()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery6()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery7()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery8()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery9()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery10()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery11()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery12()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery13()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery14()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery15()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery16()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery17()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery18()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery19()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery20()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery21()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery22()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery23()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery24()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery25()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery26()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery27()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery28()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery29()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery30()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery31()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery32()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery33()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery34()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery35()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery36()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery37()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery38()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery39()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery40()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery41()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery42()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery43()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery44()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery45()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery46()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery47()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery48()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery49()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery50()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery51()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery52()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery53()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery54()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery55()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery56()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == false (line 1893)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery57()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery58()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery59()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery60()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery61()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery62()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery63()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery64()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery65()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery66()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery67()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery68()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery69()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery70()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery71()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery72()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery73()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery74()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery75()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery76()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery77()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery78()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery79()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery80()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery81()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery82()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery83()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery84()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery85()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery86()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery87()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery88()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery89()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery90()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery91()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery92()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery93()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery94()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery95()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery96()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery97()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery98()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery99()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery100()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery101()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery102()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery103()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery104()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery105()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery106()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery107()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery108()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery109()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery110()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery111()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery112()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery113()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery114()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery115()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery116()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery117()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery118()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery119()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery120()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery121()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery122()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery123()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery124()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery125()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery126()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery127()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery128()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery129()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery130()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery131()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery132()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery133()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery134()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery135()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery136()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery137()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery138()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery139()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery140()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery141()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery142()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery143()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery144()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery145()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery146()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery147()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery148()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery149()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery150()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery151()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery152()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery153()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery154()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery155()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery156()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery157()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery158()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery159()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery160()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery161()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery162()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery163()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery164()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery165()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery166()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery167()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery168()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery169()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == false (line 1893)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery170()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery171()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery172()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery173()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery174()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery175()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery176()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery177()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery178()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery179()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery180()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery181()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery182()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery183()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery184()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery185()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery186()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery187()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery188()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery189()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery190()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery191()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery192()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery193()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery194()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery195()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery196()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery197()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery198()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery199()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery200()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery201()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery202()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery203()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery204()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery205()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery206()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery207()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery208()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery209()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery210()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery211()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery212()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery213()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery214()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery215()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery216()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery217()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery218()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery219()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery220()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery221()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery222()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery223()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery224()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery225()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery226()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery227()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery228()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery229()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery230()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery231()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery232()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery233()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery234()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery235()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery236()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery237()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery238()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery239()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery240()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery241()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery242()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery243()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery244()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery245()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery246()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery247()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery248()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery249()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery250()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery251()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery252()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery253()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery254()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery255()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery256()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery257()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery258()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery259()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery260()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery261()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery262()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery263()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery264()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery265()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery266()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery267()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery268()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery269()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery270()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery271()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery272()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery273()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery274()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery275()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery276()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery277()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery278()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery279()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery280()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery281()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery282()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == false (line 1893)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery283()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery284()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery285()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery286()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery287()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery288()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery289()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery290()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery291()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery292()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery293()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery294()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery295()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery296()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery297()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery298()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery299()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery300()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery301()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery302()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery303()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery304()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery305()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery306()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery307()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery308()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery309()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery310()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery311()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery312()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery313()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery314()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery315()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery316()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery317()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery318()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery319()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery320()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery321()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery322()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery323()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery324()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery325()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery326()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery327()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery328()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery329()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery330()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery331()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery332()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery333()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery334()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery335()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery336()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery337()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery338()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery339()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery340()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery341()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery342()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery343()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery344()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery345()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery346()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery347()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery348()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery349()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery350()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery351()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery352()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery353()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery354()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery355()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery356()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery357()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery358()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery359()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery360()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery361()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery362()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery363()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery364()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery365()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery366()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery367()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery368()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery369()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery370()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery371()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery372()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery373()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery374()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery375()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery376()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery377()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery378()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery379()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery380()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery381()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery382()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery383()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery384()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery385()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery386()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery387()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery388()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery389()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery390()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery391()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery392()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery393()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery394()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery395()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == false (line 1893)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery396()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery397()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery398()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery399()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery400()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery401()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery402()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery403()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery404()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery405()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery406()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery407()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery408()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery409()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery410()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery411()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery412()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery413()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery414()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery415()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery416()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery417()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery418()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery419()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery420()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery421()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery422()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery423()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery424()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery425()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery426()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery427()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery428()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery429()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery430()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery431()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery432()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery433()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery434()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery435()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery436()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery437()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery438()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery439()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery440()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery441()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery442()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery443()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery444()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery445()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery446()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery447()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery448()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery449()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery450()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery451()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery452()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery453()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery454()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery455()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery456()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery457()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery458()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery459()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery460()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery461()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery462()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery463()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery464()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery465()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery466()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery467()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery468()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery469()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery470()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery471()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery472()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery473()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery474()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery475()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery476()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery477()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery478()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery479()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery480()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery481()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery482()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery483()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery484()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery485()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery486()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery487()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery488()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery489()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery490()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery491()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery492()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery493()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery494()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery495()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery496()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery497()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery498()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery499()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery500()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery501()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery502()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery503()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery504()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery505()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery506()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery507()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery508()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == false (line 1893)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery509()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery510()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery511()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery512()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery513()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery514()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery515()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery516()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery517()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery518()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery519()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery520()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery521()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery522()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery523()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery524()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery525()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery526()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery527()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery528()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery529()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery530()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery531()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery532()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery533()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery534()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery535()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery536()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery537()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery538()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery539()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery540()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery541()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery542()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery543()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery544()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery545()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery546()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery547()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery548()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery549()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery550()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery551()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery552()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery553()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery554()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery555()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery556()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery557()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery558()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery559()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery560()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery561()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery562()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery563()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery564()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == false (line 1854)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery565()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery566()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery567()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery568()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery569()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery570()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery571()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery572()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery573()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery574()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery575()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery576()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery577()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery578()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery579()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery580()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery581()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery582()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery583()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery584()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery585()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery586()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery587()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery588()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery589()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery590()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery591()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery592()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery593()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery594()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery595()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery596()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery597()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery598()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery599()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery600()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery601()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery602()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery603()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery604()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery605()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery606()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery607()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery608()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery609()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery610()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery611()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery612()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery613()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery614()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery615()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery616()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery617()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery618()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery619()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery620()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery621()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == false (line 1893)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery622()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery623()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery624()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery625()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery626()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery627()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery628()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery629()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery630()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery631()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery632()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery633()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery634()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery635()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery636()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery637()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery638()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery639()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery640()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery641()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery642()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery643()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery644()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery645()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery646()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery647()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery648()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery649()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery650()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery651()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery652()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery653()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery654()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery655()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery656()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery657()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery658()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery659()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery660()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery661()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery662()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery663()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery664()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery665()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery666()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery667()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery668()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery669()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery670()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery671()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery672()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery673()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery674()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery675()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery676()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery677()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == false (line 1874)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery678()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery679()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery680()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery681()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery682()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery683()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery684()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery685()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery686()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery687()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery688()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery689()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery690()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery691()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery692()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery693()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery694()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery695()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery696()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery697()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery698()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery699()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery700()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery701()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery702()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery703()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery704()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery705()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery706()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery707()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery708()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery709()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery710()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery711()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery712()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery713()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery714()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery715()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery716()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery717()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery718()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery719()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery720()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery721()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery722()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery723()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery724()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery725()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery726()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery727()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery728()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery729()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery730()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery731()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery732()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery733()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery734()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == false (line 1893)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery735()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery736()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery737()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery738()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery739()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery740()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery741()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery742()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery743()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery744()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery745()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery746()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery747()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery748()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery749()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery750()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery751()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery752()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery753()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery754()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery755()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery756()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery757()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery758()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery759()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery760()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery761()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery762()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery763()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery764()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery765()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery766()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery767()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery768()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery769()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery770()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery771()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery772()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery773()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery774()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery775()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery776()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery777()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery778()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery779()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery780()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery781()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery782()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery783()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery784()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery785()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery786()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery787()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery788()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery789()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery790()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == false (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery791()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery792()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery793()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery794()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery795()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery796()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery797()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery798()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery799()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery800()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery801()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery802()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery803()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery804()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery805()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery806()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery807()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery808()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery809()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery810()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery811()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery812()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery813()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery814()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery815()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery816()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery817()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery818()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery819()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery820()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery821()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery822()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery823()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery824()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery825()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery826()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery827()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery828()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery829()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery830()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery831()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery832()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery833()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery834()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery835()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery836()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery837()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery838()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery839()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery840()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery841()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery842()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery843()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery844()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery845()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery846()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery847()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == false (line 1893)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery848()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery849()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery850()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery851()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery852()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery853()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery854()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery855()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery856()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery857()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery858()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery859()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery860()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery861()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery862()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery863()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery864()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery865()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery866()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery867()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery868()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery869()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery870()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery871()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery872()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery873()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery874()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery875()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery876()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery877()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery878()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery879()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery880()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery881()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery882()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery883()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery884()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery885()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery886()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery887()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery888()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery889()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery890()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery891()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery892()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery893()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery894()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery895()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery896()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery897()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery898()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery899()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery900()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery901()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery902()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery903()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == false (line 1875)
    // if (\is_resource($this->dbh)) == true (line 1884)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery904()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery905()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery906()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery907()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery908()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery909()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery910()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery911()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery912()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery913()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery914()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery915()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery916()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery917()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery918()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery919()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery920()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery921()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery922()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery923()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery924()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery925()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery926()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery927()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery928()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery929()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery930()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery931()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery932()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery933()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery934()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery935()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery936()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery937()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery938()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery939()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery940()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery941()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery942()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery943()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery944()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery945()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery946()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery947()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery948()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery949()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery950()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery951()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery952()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery953()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery954()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery955()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery956()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery957()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery958()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery959()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery960()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == false (line 1893)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery961()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery962()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery963()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery964()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery965()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery966()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery967()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery968()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery969()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery970()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery971()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery972()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery973()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery974()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery975()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery976()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery977()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery978()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery979()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery980()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery981()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery982()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery983()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery984()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery985()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery986()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery987()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery988()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery989()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery990()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery991()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery992()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery993()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery994()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery995()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery996()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery997()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery998()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery999()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1000()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1001()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1002()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1003()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1004()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1005()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1006()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1007()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1008()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1009()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1010()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1011()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1012()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1013()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1014()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1015()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1016()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == false (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1017()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1018()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1019()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1020()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1021()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1022()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1023()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1024()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1025()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1026()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1027()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1028()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1029()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1030()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1031()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1032()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1033()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1034()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1035()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1036()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1037()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1038()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1039()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1040()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1041()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1042()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1043()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1044()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1045()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1046()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1047()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1048()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1049()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1050()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1051()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1052()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1053()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1054()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1055()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1056()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1057()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1058()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1059()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1060()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1061()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1062()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1063()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1064()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1065()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1066()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1067()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1068()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1069()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1070()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1071()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1072()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == false (line 1892)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1073()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == false (line 1893)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1074()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1075()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1076()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1077()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1078()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1079()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1080()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1081()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1082()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1083()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1084()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1085()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1086()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1087()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == false (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1088()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1089()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1090()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1091()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1092()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1093()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1094()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1095()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1096()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1097()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1098()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1099()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1100()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1101()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == false (line 1902)
    // if (\is_resource($this->dbh)) == true (line 1909)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1102()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1103()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1104()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1105()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1106()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1107()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1108()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1109()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1110()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1111()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1112()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1113()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1114()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1115()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == false (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1116()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == false (line 1951)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1117()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1118()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == false (line 1946)
    // if (\is_resource($this->result)) == true (line 1951)
    // while ($row = \mysql_fetch_object($this->result)) == true (line 1952)
    // while ($row = \mysql_fetch_object($this->result)) == false (line 1952)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1119()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1120()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == false (line 1928)
    // if ($this->use_mysqli && $this->result instanceof \mysqli_result) == true (line 1946)
    // while ($row = \mysqli_fetch_object($this->result)) == true (line 1947)
    // while ($row = \mysqli_fetch_object($this->result)) == false (line 1947)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1121()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1122()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1123()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == false (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1124()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1935)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1125()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == false (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1126()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == false (line 1926)
    // if (\preg_match('/^\\s*(insert|delete|update|replace)\\s/i', $query)) == true (line 1928)
    // if ($this->use_mysqli) == true (line 1929)
    // if (\preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1935)
    // if ($this->use_mysqli) == true (line 1936)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1127()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == false (line 1916)
    // if (\preg_match('/^\\s*(create|alter|truncate|drop)\\s/i', $query)) == true (line 1926)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1128()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == false (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1129()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == false (line 1859)
    // if (!empty($this->dbh)) == true (line 1874)
    // if ($this->use_mysqli) == true (line 1875)
    // if ($this->dbh instanceof \mysqli) == true (line 1876)
    // if (empty($this->dbh) || 2006 == $mysql_errno) == true (line 1892)
    // if ($this->check_connection()) == true (line 1893)
    // if ($this->use_mysqli) == true (line 1902)
    // if ($this->dbh instanceof \mysqli) == true (line 1903)
    // if ($this->last_error) == true (line 1916)
    // if ($this->insert_id && \preg_match('/^\\s*(insert|replace)\\s/i', $query)) == true (line 1918)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1130()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == false (line 1831)
    // if ($this->check_current_query && !$this->check_ascii($query)) == true (line 1854)
    // if ($stripped_query !== $query) == true (line 1859)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testQuery1131()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->ready) == true (line 1831)

    $actual = $this->wpdb->query($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPlaceholder_escape0()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$placeholder) == false (line 2003)
    // if (!\has_filter('query', array($this, 'remove_placeholder_escape'))) == false (line 2016)

    $actual = $this->wpdb->placeholder_escape();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPlaceholder_escape1()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$placeholder) == false (line 2003)
    // if (!\has_filter('query', array($this, 'remove_placeholder_escape'))) == true (line 2016)

    $actual = $this->wpdb->placeholder_escape();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPlaceholder_escape2()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$placeholder) == true (line 2003)
    // if (!\has_filter('query', array($this, 'remove_placeholder_escape'))) == false (line 2016)

    $actual = $this->wpdb->placeholder_escape();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testPlaceholder_escape3()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$placeholder) == true (line 2003)
    // if (!\has_filter('query', array($this, 'remove_placeholder_escape'))) == true (line 2016)

    $actual = $this->wpdb->placeholder_escape();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAdd_placeholder_escape0()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    $actual = $this->wpdb->add_placeholder_escape($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testRemove_placeholder_escape0()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    $actual = $this->wpdb->remove_placeholder_escape($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testInsert0()
{
    $table = m::mock('UntypedParameter_table_');
    $data = m::mock('UntypedParameter_data_');
    $format = m::mock('UntypedParameter_format_');

    // TODO: Your mock expectations here

    $actual = $this->wpdb->insert($table, $data, $format);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testReplace0()
{
    $table = m::mock('UntypedParameter_table_');
    $data = m::mock('UntypedParameter_data_');
    $format = m::mock('UntypedParameter_format_');

    // TODO: Your mock expectations here

    $actual = $this->wpdb->replace($table, $data, $format);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function test_insert_replace_helper0()
{
    $table = m::mock('UntypedParameter_table_');
    $data = m::mock('UntypedParameter_data_');
    $format = m::mock('UntypedParameter_format_');
    $type = m::mock('UntypedParameter_type_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\in_array(\strtoupper($type), array('REPLACE', 'INSERT'))) == false (line 2125)
    // if (\false === $data) == false (line 2130)

    $actual = $this->wpdb->_insert_replace_helper($table, $data, $format, $type);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function test_insert_replace_helper1()
{
    $table = m::mock('UntypedParameter_table_');
    $data = m::mock('UntypedParameter_data_');
    $format = m::mock('UntypedParameter_format_');
    $type = m::mock('UntypedParameter_type_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\in_array(\strtoupper($type), array('REPLACE', 'INSERT'))) == false (line 2125)
    // if (\false === $data) == false (line 2130)
    // if (\is_null($value['value'])) == false (line 2136)

    $actual = $this->wpdb->_insert_replace_helper($table, $data, $format, $type);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function test_insert_replace_helper2()
{
    $table = m::mock('UntypedParameter_table_');
    $data = m::mock('UntypedParameter_data_');
    $format = m::mock('UntypedParameter_format_');
    $type = m::mock('UntypedParameter_type_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\in_array(\strtoupper($type), array('REPLACE', 'INSERT'))) == false (line 2125)
    // if (\false === $data) == false (line 2130)
    // if (\is_null($value['value'])) == true (line 2136)

    $actual = $this->wpdb->_insert_replace_helper($table, $data, $format, $type);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function test_insert_replace_helper3()
{
    $table = m::mock('UntypedParameter_table_');
    $data = m::mock('UntypedParameter_data_');
    $format = m::mock('UntypedParameter_format_');
    $type = m::mock('UntypedParameter_type_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\in_array(\strtoupper($type), array('REPLACE', 'INSERT'))) == false (line 2125)
    // if (\false === $data) == true (line 2130)

    $actual = $this->wpdb->_insert_replace_helper($table, $data, $format, $type);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function test_insert_replace_helper4()
{
    $table = m::mock('UntypedParameter_table_');
    $data = m::mock('UntypedParameter_data_');
    $format = m::mock('UntypedParameter_format_');
    $type = m::mock('UntypedParameter_type_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\in_array(\strtoupper($type), array('REPLACE', 'INSERT'))) == true (line 2125)

    $actual = $this->wpdb->_insert_replace_helper($table, $data, $format, $type);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testUpdate0()
{
    $table = m::mock('UntypedParameter_table_');
    $data = m::mock('UntypedParameter_data_');
    $where = m::mock('UntypedParameter_where_');
    $format = m::mock('UntypedParameter_format_');
    $where_format = m::mock('UntypedParameter_where_format_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($data) || !\is_array($where)) == false (line 2185)
    // if (\false === $data) == false (line 2190)
    // if (\false === $where) == false (line 2194)

    $actual = $this->wpdb->update($table, $data, $where, $format, $where_format);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testUpdate1()
{
    $table = m::mock('UntypedParameter_table_');
    $data = m::mock('UntypedParameter_data_');
    $where = m::mock('UntypedParameter_where_');
    $format = m::mock('UntypedParameter_format_');
    $where_format = m::mock('UntypedParameter_where_format_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($data) || !\is_array($where)) == false (line 2185)
    // if (\false === $data) == false (line 2190)
    // if (\false === $where) == false (line 2194)
    // if (\is_null($value['value'])) == false (line 2209)

    $actual = $this->wpdb->update($table, $data, $where, $format, $where_format);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testUpdate2()
{
    $table = m::mock('UntypedParameter_table_');
    $data = m::mock('UntypedParameter_data_');
    $where = m::mock('UntypedParameter_where_');
    $format = m::mock('UntypedParameter_format_');
    $where_format = m::mock('UntypedParameter_where_format_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($data) || !\is_array($where)) == false (line 2185)
    // if (\false === $data) == false (line 2190)
    // if (\false === $where) == false (line 2194)
    // if (\is_null($value['value'])) == true (line 2209)

    $actual = $this->wpdb->update($table, $data, $where, $format, $where_format);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testUpdate3()
{
    $table = m::mock('UntypedParameter_table_');
    $data = m::mock('UntypedParameter_data_');
    $where = m::mock('UntypedParameter_where_');
    $format = m::mock('UntypedParameter_format_');
    $where_format = m::mock('UntypedParameter_where_format_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($data) || !\is_array($where)) == false (line 2185)
    // if (\false === $data) == false (line 2190)
    // if (\false === $where) == false (line 2194)
    // if (\is_null($value['value'])) == false (line 2200)

    $actual = $this->wpdb->update($table, $data, $where, $format, $where_format);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testUpdate4()
{
    $table = m::mock('UntypedParameter_table_');
    $data = m::mock('UntypedParameter_data_');
    $where = m::mock('UntypedParameter_where_');
    $format = m::mock('UntypedParameter_format_');
    $where_format = m::mock('UntypedParameter_where_format_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($data) || !\is_array($where)) == false (line 2185)
    // if (\false === $data) == false (line 2190)
    // if (\false === $where) == false (line 2194)
    // if (\is_null($value['value'])) == false (line 2200)
    // if (\is_null($value['value'])) == false (line 2209)

    $actual = $this->wpdb->update($table, $data, $where, $format, $where_format);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testUpdate5()
{
    $table = m::mock('UntypedParameter_table_');
    $data = m::mock('UntypedParameter_data_');
    $where = m::mock('UntypedParameter_where_');
    $format = m::mock('UntypedParameter_format_');
    $where_format = m::mock('UntypedParameter_where_format_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($data) || !\is_array($where)) == false (line 2185)
    // if (\false === $data) == false (line 2190)
    // if (\false === $where) == false (line 2194)
    // if (\is_null($value['value'])) == false (line 2200)
    // if (\is_null($value['value'])) == true (line 2209)

    $actual = $this->wpdb->update($table, $data, $where, $format, $where_format);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testUpdate6()
{
    $table = m::mock('UntypedParameter_table_');
    $data = m::mock('UntypedParameter_data_');
    $where = m::mock('UntypedParameter_where_');
    $format = m::mock('UntypedParameter_format_');
    $where_format = m::mock('UntypedParameter_where_format_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($data) || !\is_array($where)) == false (line 2185)
    // if (\false === $data) == false (line 2190)
    // if (\false === $where) == false (line 2194)
    // if (\is_null($value['value'])) == true (line 2200)

    $actual = $this->wpdb->update($table, $data, $where, $format, $where_format);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testUpdate7()
{
    $table = m::mock('UntypedParameter_table_');
    $data = m::mock('UntypedParameter_data_');
    $where = m::mock('UntypedParameter_where_');
    $format = m::mock('UntypedParameter_format_');
    $where_format = m::mock('UntypedParameter_where_format_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($data) || !\is_array($where)) == false (line 2185)
    // if (\false === $data) == false (line 2190)
    // if (\false === $where) == false (line 2194)
    // if (\is_null($value['value'])) == true (line 2200)
    // if (\is_null($value['value'])) == false (line 2209)

    $actual = $this->wpdb->update($table, $data, $where, $format, $where_format);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testUpdate8()
{
    $table = m::mock('UntypedParameter_table_');
    $data = m::mock('UntypedParameter_data_');
    $where = m::mock('UntypedParameter_where_');
    $format = m::mock('UntypedParameter_format_');
    $where_format = m::mock('UntypedParameter_where_format_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($data) || !\is_array($where)) == false (line 2185)
    // if (\false === $data) == false (line 2190)
    // if (\false === $where) == false (line 2194)
    // if (\is_null($value['value'])) == true (line 2200)
    // if (\is_null($value['value'])) == true (line 2209)

    $actual = $this->wpdb->update($table, $data, $where, $format, $where_format);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testUpdate9()
{
    $table = m::mock('UntypedParameter_table_');
    $data = m::mock('UntypedParameter_data_');
    $where = m::mock('UntypedParameter_where_');
    $format = m::mock('UntypedParameter_format_');
    $where_format = m::mock('UntypedParameter_where_format_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($data) || !\is_array($where)) == false (line 2185)
    // if (\false === $data) == false (line 2190)
    // if (\false === $where) == true (line 2194)

    $actual = $this->wpdb->update($table, $data, $where, $format, $where_format);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testUpdate10()
{
    $table = m::mock('UntypedParameter_table_');
    $data = m::mock('UntypedParameter_data_');
    $where = m::mock('UntypedParameter_where_');
    $format = m::mock('UntypedParameter_format_');
    $where_format = m::mock('UntypedParameter_where_format_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($data) || !\is_array($where)) == false (line 2185)
    // if (\false === $data) == true (line 2190)

    $actual = $this->wpdb->update($table, $data, $where, $format, $where_format);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testUpdate11()
{
    $table = m::mock('UntypedParameter_table_');
    $data = m::mock('UntypedParameter_data_');
    $where = m::mock('UntypedParameter_where_');
    $format = m::mock('UntypedParameter_format_');
    $where_format = m::mock('UntypedParameter_where_format_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($data) || !\is_array($where)) == true (line 2185)

    $actual = $this->wpdb->update($table, $data, $where, $format, $where_format);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDelete0()
{
    $table = m::mock('UntypedParameter_table_');
    $where = m::mock('UntypedParameter_where_');
    $where_format = m::mock('UntypedParameter_where_format_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($where)) == false (line 2250)
    // if (\false === $where) == false (line 2255)

    $actual = $this->wpdb->delete($table, $where, $where_format);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDelete1()
{
    $table = m::mock('UntypedParameter_table_');
    $where = m::mock('UntypedParameter_where_');
    $where_format = m::mock('UntypedParameter_where_format_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($where)) == false (line 2250)
    // if (\false === $where) == false (line 2255)
    // if (\is_null($value['value'])) == false (line 2261)

    $actual = $this->wpdb->delete($table, $where, $where_format);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDelete2()
{
    $table = m::mock('UntypedParameter_table_');
    $where = m::mock('UntypedParameter_where_');
    $where_format = m::mock('UntypedParameter_where_format_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($where)) == false (line 2250)
    // if (\false === $where) == false (line 2255)
    // if (\is_null($value['value'])) == true (line 2261)

    $actual = $this->wpdb->delete($table, $where, $where_format);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDelete3()
{
    $table = m::mock('UntypedParameter_table_');
    $where = m::mock('UntypedParameter_where_');
    $where_format = m::mock('UntypedParameter_where_format_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($where)) == false (line 2250)
    // if (\false === $where) == true (line 2255)

    $actual = $this->wpdb->delete($table, $where, $where_format);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDelete4()
{
    $table = m::mock('UntypedParameter_table_');
    $where = m::mock('UntypedParameter_where_');
    $where_format = m::mock('UntypedParameter_where_format_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($where)) == true (line 2250)

    $actual = $this->wpdb->delete($table, $where, $where_format);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_var0()
{
    $query = m::mock('UntypedParameter_query_');
    $x = m::mock('UntypedParameter_x_');
    $y = m::mock('UntypedParameter_y_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2433)
    // if ($query) == false (line 2437)
    // if (!empty($this->last_result[$y])) == false (line 2442)

    $actual = $this->wpdb->get_var($query, $x, $y);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_var1()
{
    $query = m::mock('UntypedParameter_query_');
    $x = m::mock('UntypedParameter_x_');
    $y = m::mock('UntypedParameter_y_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2433)
    // if ($query) == false (line 2437)
    // if (!empty($this->last_result[$y])) == true (line 2442)

    $actual = $this->wpdb->get_var($query, $x, $y);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_var2()
{
    $query = m::mock('UntypedParameter_query_');
    $x = m::mock('UntypedParameter_x_');
    $y = m::mock('UntypedParameter_y_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2433)
    // if ($query) == true (line 2437)
    // if (!empty($this->last_result[$y])) == false (line 2442)

    $actual = $this->wpdb->get_var($query, $x, $y);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_var3()
{
    $query = m::mock('UntypedParameter_query_');
    $x = m::mock('UntypedParameter_x_');
    $y = m::mock('UntypedParameter_y_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2433)
    // if ($query) == true (line 2437)
    // if (!empty($this->last_result[$y])) == true (line 2442)

    $actual = $this->wpdb->get_var($query, $x, $y);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_var4()
{
    $query = m::mock('UntypedParameter_query_');
    $x = m::mock('UntypedParameter_x_');
    $y = m::mock('UntypedParameter_y_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2433)
    // if ($query) == false (line 2437)
    // if (!empty($this->last_result[$y])) == false (line 2442)

    $actual = $this->wpdb->get_var($query, $x, $y);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_var5()
{
    $query = m::mock('UntypedParameter_query_');
    $x = m::mock('UntypedParameter_x_');
    $y = m::mock('UntypedParameter_y_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2433)
    // if ($query) == false (line 2437)
    // if (!empty($this->last_result[$y])) == true (line 2442)

    $actual = $this->wpdb->get_var($query, $x, $y);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_var6()
{
    $query = m::mock('UntypedParameter_query_');
    $x = m::mock('UntypedParameter_x_');
    $y = m::mock('UntypedParameter_y_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2433)
    // if ($query) == true (line 2437)
    // if (!empty($this->last_result[$y])) == false (line 2442)

    $actual = $this->wpdb->get_var($query, $x, $y);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_var7()
{
    $query = m::mock('UntypedParameter_query_');
    $x = m::mock('UntypedParameter_x_');
    $y = m::mock('UntypedParameter_y_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2433)
    // if ($query) == true (line 2437)
    // if (!empty($this->last_result[$y])) == true (line 2442)

    $actual = $this->wpdb->get_var($query, $x, $y);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_row0()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');
    $y = m::mock('UntypedParameter_y_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2466)
    // if ($query) == false (line 2470)

    $actual = $this->wpdb->get_row($query, $output, $y);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_row1()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');
    $y = m::mock('UntypedParameter_y_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2466)
    // if ($query) == true (line 2470)
    // if (!isset($this->last_result[$y])) == false (line 2476)
    // if ($output == \OBJECT) == false (line 2480)
    // if ($output == \ARRAY_A) == false (line 2482)
    // if ($output == \ARRAY_N) == false (line 2484)
    // if (\strtoupper($output) === \OBJECT) == false (line 2486)

    $actual = $this->wpdb->get_row($query, $output, $y);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_row2()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');
    $y = m::mock('UntypedParameter_y_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2466)
    // if ($query) == true (line 2470)
    // if (!isset($this->last_result[$y])) == false (line 2476)
    // if ($output == \OBJECT) == false (line 2480)
    // if ($output == \ARRAY_A) == false (line 2482)
    // if ($output == \ARRAY_N) == false (line 2484)
    // if (\strtoupper($output) === \OBJECT) == true (line 2486)

    $actual = $this->wpdb->get_row($query, $output, $y);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_row3()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');
    $y = m::mock('UntypedParameter_y_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2466)
    // if ($query) == true (line 2470)
    // if (!isset($this->last_result[$y])) == false (line 2476)
    // if ($output == \OBJECT) == false (line 2480)
    // if ($output == \ARRAY_A) == false (line 2482)
    // if ($output == \ARRAY_N) == true (line 2484)

    $actual = $this->wpdb->get_row($query, $output, $y);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_row4()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');
    $y = m::mock('UntypedParameter_y_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2466)
    // if ($query) == true (line 2470)
    // if (!isset($this->last_result[$y])) == false (line 2476)
    // if ($output == \OBJECT) == false (line 2480)
    // if ($output == \ARRAY_A) == true (line 2482)

    $actual = $this->wpdb->get_row($query, $output, $y);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_row5()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');
    $y = m::mock('UntypedParameter_y_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2466)
    // if ($query) == true (line 2470)
    // if (!isset($this->last_result[$y])) == false (line 2476)
    // if ($output == \OBJECT) == true (line 2480)

    $actual = $this->wpdb->get_row($query, $output, $y);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_row6()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');
    $y = m::mock('UntypedParameter_y_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2466)
    // if ($query) == true (line 2470)
    // if (!isset($this->last_result[$y])) == true (line 2476)

    $actual = $this->wpdb->get_row($query, $output, $y);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_row7()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');
    $y = m::mock('UntypedParameter_y_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2466)
    // if ($query) == false (line 2470)

    $actual = $this->wpdb->get_row($query, $output, $y);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_row8()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');
    $y = m::mock('UntypedParameter_y_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2466)
    // if ($query) == true (line 2470)
    // if (!isset($this->last_result[$y])) == false (line 2476)
    // if ($output == \OBJECT) == false (line 2480)
    // if ($output == \ARRAY_A) == false (line 2482)
    // if ($output == \ARRAY_N) == false (line 2484)
    // if (\strtoupper($output) === \OBJECT) == false (line 2486)

    $actual = $this->wpdb->get_row($query, $output, $y);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_row9()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');
    $y = m::mock('UntypedParameter_y_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2466)
    // if ($query) == true (line 2470)
    // if (!isset($this->last_result[$y])) == false (line 2476)
    // if ($output == \OBJECT) == false (line 2480)
    // if ($output == \ARRAY_A) == false (line 2482)
    // if ($output == \ARRAY_N) == false (line 2484)
    // if (\strtoupper($output) === \OBJECT) == true (line 2486)

    $actual = $this->wpdb->get_row($query, $output, $y);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_row10()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');
    $y = m::mock('UntypedParameter_y_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2466)
    // if ($query) == true (line 2470)
    // if (!isset($this->last_result[$y])) == false (line 2476)
    // if ($output == \OBJECT) == false (line 2480)
    // if ($output == \ARRAY_A) == false (line 2482)
    // if ($output == \ARRAY_N) == true (line 2484)

    $actual = $this->wpdb->get_row($query, $output, $y);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_row11()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');
    $y = m::mock('UntypedParameter_y_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2466)
    // if ($query) == true (line 2470)
    // if (!isset($this->last_result[$y])) == false (line 2476)
    // if ($output == \OBJECT) == false (line 2480)
    // if ($output == \ARRAY_A) == true (line 2482)

    $actual = $this->wpdb->get_row($query, $output, $y);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_row12()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');
    $y = m::mock('UntypedParameter_y_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2466)
    // if ($query) == true (line 2470)
    // if (!isset($this->last_result[$y])) == false (line 2476)
    // if ($output == \OBJECT) == true (line 2480)

    $actual = $this->wpdb->get_row($query, $output, $y);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_row13()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');
    $y = m::mock('UntypedParameter_y_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2466)
    // if ($query) == true (line 2470)
    // if (!isset($this->last_result[$y])) == true (line 2476)

    $actual = $this->wpdb->get_row($query, $output, $y);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col0()
{
    $query = m::mock('UntypedParameter_query_');
    $x = m::mock('UntypedParameter_x_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2508)
    // if ($query) == false (line 2512)
    // for (...) == false (line 2518)

    $actual = $this->wpdb->get_col($query, $x);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col1()
{
    $query = m::mock('UntypedParameter_query_');
    $x = m::mock('UntypedParameter_x_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2508)
    // if ($query) == false (line 2512)
    // for (...) == true (line 2518)
    // for (...) == false (line 2518)

    $actual = $this->wpdb->get_col($query, $x);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col2()
{
    $query = m::mock('UntypedParameter_query_');
    $x = m::mock('UntypedParameter_x_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2508)
    // if ($query) == true (line 2512)
    // for (...) == false (line 2518)

    $actual = $this->wpdb->get_col($query, $x);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col3()
{
    $query = m::mock('UntypedParameter_query_');
    $x = m::mock('UntypedParameter_x_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2508)
    // if ($query) == true (line 2512)
    // for (...) == true (line 2518)
    // for (...) == false (line 2518)

    $actual = $this->wpdb->get_col($query, $x);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col4()
{
    $query = m::mock('UntypedParameter_query_');
    $x = m::mock('UntypedParameter_x_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2508)
    // if ($query) == false (line 2512)
    // for (...) == false (line 2518)

    $actual = $this->wpdb->get_col($query, $x);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col5()
{
    $query = m::mock('UntypedParameter_query_');
    $x = m::mock('UntypedParameter_x_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2508)
    // if ($query) == false (line 2512)
    // for (...) == true (line 2518)
    // for (...) == false (line 2518)

    $actual = $this->wpdb->get_col($query, $x);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col6()
{
    $query = m::mock('UntypedParameter_query_');
    $x = m::mock('UntypedParameter_x_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2508)
    // if ($query) == true (line 2512)
    // for (...) == false (line 2518)

    $actual = $this->wpdb->get_col($query, $x);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col7()
{
    $query = m::mock('UntypedParameter_query_');
    $x = m::mock('UntypedParameter_x_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2508)
    // if ($query) == true (line 2512)
    // for (...) == true (line 2518)
    // for (...) == false (line 2518)

    $actual = $this->wpdb->get_col($query, $x);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_results0()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2542)
    // if ($query) == false (line 2546)

    $actual = $this->wpdb->get_results($query, $output);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_results1()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2542)
    // if ($query) == true (line 2546)
    // if ($output == \OBJECT) == false (line 2553)
    // if ($output == \OBJECT_K) == false (line 2556)
    // if ($output == \ARRAY_A || $output == \ARRAY_N) == false (line 2567)
    // if (\strtoupper($output) === \OBJECT) == false (line 2581)

    $actual = $this->wpdb->get_results($query, $output);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_results2()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2542)
    // if ($query) == true (line 2546)
    // if ($output == \OBJECT) == false (line 2553)
    // if ($output == \OBJECT_K) == false (line 2556)
    // if ($output == \ARRAY_A || $output == \ARRAY_N) == false (line 2567)
    // if (\strtoupper($output) === \OBJECT) == true (line 2581)

    $actual = $this->wpdb->get_results($query, $output);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_results3()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2542)
    // if ($query) == true (line 2546)
    // if ($output == \OBJECT) == false (line 2553)
    // if ($output == \OBJECT_K) == false (line 2556)
    // if ($output == \ARRAY_A || $output == \ARRAY_N) == true (line 2567)
    // if ($this->last_result) == false (line 2569)

    $actual = $this->wpdb->get_results($query, $output);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_results4()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2542)
    // if ($query) == true (line 2546)
    // if ($output == \OBJECT) == false (line 2553)
    // if ($output == \OBJECT_K) == false (line 2556)
    // if ($output == \ARRAY_A || $output == \ARRAY_N) == true (line 2567)
    // if ($this->last_result) == true (line 2569)

    $actual = $this->wpdb->get_results($query, $output);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_results5()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2542)
    // if ($query) == true (line 2546)
    // if ($output == \OBJECT) == false (line 2553)
    // if ($output == \OBJECT_K) == false (line 2556)
    // if ($output == \ARRAY_A || $output == \ARRAY_N) == true (line 2567)
    // if ($this->last_result) == true (line 2569)
    // if ($output == \ARRAY_N) == false (line 2571)

    $actual = $this->wpdb->get_results($query, $output);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_results6()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2542)
    // if ($query) == true (line 2546)
    // if ($output == \OBJECT) == false (line 2553)
    // if ($output == \OBJECT_K) == false (line 2556)
    // if ($output == \ARRAY_A || $output == \ARRAY_N) == true (line 2567)
    // if ($this->last_result) == true (line 2569)
    // if ($output == \ARRAY_N) == true (line 2571)

    $actual = $this->wpdb->get_results($query, $output);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_results7()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2542)
    // if ($query) == true (line 2546)
    // if ($output == \OBJECT) == false (line 2553)
    // if ($output == \OBJECT_K) == true (line 2556)

    $actual = $this->wpdb->get_results($query, $output);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_results8()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2542)
    // if ($query) == true (line 2546)
    // if ($output == \OBJECT) == false (line 2553)
    // if ($output == \OBJECT_K) == true (line 2556)
    // if (!isset($new_array[$key])) == false (line 2562)

    $actual = $this->wpdb->get_results($query, $output);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_results9()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2542)
    // if ($query) == true (line 2546)
    // if ($output == \OBJECT) == false (line 2553)
    // if ($output == \OBJECT_K) == true (line 2556)
    // if (!isset($new_array[$key])) == true (line 2562)

    $actual = $this->wpdb->get_results($query, $output);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_results10()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == false (line 2542)
    // if ($query) == true (line 2546)
    // if ($output == \OBJECT) == true (line 2553)

    $actual = $this->wpdb->get_results($query, $output);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_results11()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2542)
    // if ($query) == false (line 2546)

    $actual = $this->wpdb->get_results($query, $output);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_results12()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2542)
    // if ($query) == true (line 2546)
    // if ($output == \OBJECT) == false (line 2553)
    // if ($output == \OBJECT_K) == false (line 2556)
    // if ($output == \ARRAY_A || $output == \ARRAY_N) == false (line 2567)
    // if (\strtoupper($output) === \OBJECT) == false (line 2581)

    $actual = $this->wpdb->get_results($query, $output);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_results13()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2542)
    // if ($query) == true (line 2546)
    // if ($output == \OBJECT) == false (line 2553)
    // if ($output == \OBJECT_K) == false (line 2556)
    // if ($output == \ARRAY_A || $output == \ARRAY_N) == false (line 2567)
    // if (\strtoupper($output) === \OBJECT) == true (line 2581)

    $actual = $this->wpdb->get_results($query, $output);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_results14()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2542)
    // if ($query) == true (line 2546)
    // if ($output == \OBJECT) == false (line 2553)
    // if ($output == \OBJECT_K) == false (line 2556)
    // if ($output == \ARRAY_A || $output == \ARRAY_N) == true (line 2567)
    // if ($this->last_result) == false (line 2569)

    $actual = $this->wpdb->get_results($query, $output);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_results15()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2542)
    // if ($query) == true (line 2546)
    // if ($output == \OBJECT) == false (line 2553)
    // if ($output == \OBJECT_K) == false (line 2556)
    // if ($output == \ARRAY_A || $output == \ARRAY_N) == true (line 2567)
    // if ($this->last_result) == true (line 2569)

    $actual = $this->wpdb->get_results($query, $output);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_results16()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2542)
    // if ($query) == true (line 2546)
    // if ($output == \OBJECT) == false (line 2553)
    // if ($output == \OBJECT_K) == false (line 2556)
    // if ($output == \ARRAY_A || $output == \ARRAY_N) == true (line 2567)
    // if ($this->last_result) == true (line 2569)
    // if ($output == \ARRAY_N) == false (line 2571)

    $actual = $this->wpdb->get_results($query, $output);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_results17()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2542)
    // if ($query) == true (line 2546)
    // if ($output == \OBJECT) == false (line 2553)
    // if ($output == \OBJECT_K) == false (line 2556)
    // if ($output == \ARRAY_A || $output == \ARRAY_N) == true (line 2567)
    // if ($this->last_result) == true (line 2569)
    // if ($output == \ARRAY_N) == true (line 2571)

    $actual = $this->wpdb->get_results($query, $output);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_results18()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2542)
    // if ($query) == true (line 2546)
    // if ($output == \OBJECT) == false (line 2553)
    // if ($output == \OBJECT_K) == true (line 2556)

    $actual = $this->wpdb->get_results($query, $output);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_results19()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2542)
    // if ($query) == true (line 2546)
    // if ($output == \OBJECT) == false (line 2553)
    // if ($output == \OBJECT_K) == true (line 2556)
    // if (!isset($new_array[$key])) == false (line 2562)

    $actual = $this->wpdb->get_results($query, $output);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_results20()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2542)
    // if ($query) == true (line 2546)
    // if ($output == \OBJECT) == false (line 2553)
    // if ($output == \OBJECT_K) == true (line 2556)
    // if (!isset($new_array[$key])) == true (line 2562)

    $actual = $this->wpdb->get_results($query, $output);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_results21()
{
    $query = m::mock('UntypedParameter_query_');
    $output = m::mock('UntypedParameter_output_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->check_current_query && $this->check_safe_collation($query)) == true (line 2542)
    // if ($query) == true (line 2546)
    // if ($output == \OBJECT) == true (line 2553)

    $actual = $this->wpdb->get_results($query, $output);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_charset0()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\null !== $charset) == false (line 2715)
    // if (empty($this->is_mysql)) == false (line 2720)
    // if (empty($this->table_charset[$tablekey])) == false (line 2724)
    // if (empty($this->col_meta[$tablekey])) == false (line 2733)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2738)
    // if (empty($this->col_meta[$tablekey][$columnkey]->Collation)) == false (line 2743)

    $actual = $this->wpdb->get_col_charset($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_charset1()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\null !== $charset) == false (line 2715)
    // if (empty($this->is_mysql)) == false (line 2720)
    // if (empty($this->table_charset[$tablekey])) == false (line 2724)
    // if (empty($this->col_meta[$tablekey])) == false (line 2733)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2738)
    // if (empty($this->col_meta[$tablekey][$columnkey]->Collation)) == true (line 2743)

    $actual = $this->wpdb->get_col_charset($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_charset2()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\null !== $charset) == false (line 2715)
    // if (empty($this->is_mysql)) == false (line 2720)
    // if (empty($this->table_charset[$tablekey])) == false (line 2724)
    // if (empty($this->col_meta[$tablekey])) == false (line 2733)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == true (line 2738)

    $actual = $this->wpdb->get_col_charset($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_charset3()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\null !== $charset) == false (line 2715)
    // if (empty($this->is_mysql)) == false (line 2720)
    // if (empty($this->table_charset[$tablekey])) == false (line 2724)
    // if (empty($this->col_meta[$tablekey])) == true (line 2733)

    $actual = $this->wpdb->get_col_charset($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_charset4()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\null !== $charset) == false (line 2715)
    // if (empty($this->is_mysql)) == false (line 2720)
    // if (empty($this->table_charset[$tablekey])) == true (line 2724)
    // if (\is_wp_error($table_charset)) == false (line 2727)
    // if (empty($this->col_meta[$tablekey])) == false (line 2733)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2738)
    // if (empty($this->col_meta[$tablekey][$columnkey]->Collation)) == false (line 2743)

    $actual = $this->wpdb->get_col_charset($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_charset5()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\null !== $charset) == false (line 2715)
    // if (empty($this->is_mysql)) == false (line 2720)
    // if (empty($this->table_charset[$tablekey])) == true (line 2724)
    // if (\is_wp_error($table_charset)) == false (line 2727)
    // if (empty($this->col_meta[$tablekey])) == false (line 2733)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2738)
    // if (empty($this->col_meta[$tablekey][$columnkey]->Collation)) == true (line 2743)

    $actual = $this->wpdb->get_col_charset($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_charset6()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\null !== $charset) == false (line 2715)
    // if (empty($this->is_mysql)) == false (line 2720)
    // if (empty($this->table_charset[$tablekey])) == true (line 2724)
    // if (\is_wp_error($table_charset)) == false (line 2727)
    // if (empty($this->col_meta[$tablekey])) == false (line 2733)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == true (line 2738)

    $actual = $this->wpdb->get_col_charset($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_charset7()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\null !== $charset) == false (line 2715)
    // if (empty($this->is_mysql)) == false (line 2720)
    // if (empty($this->table_charset[$tablekey])) == true (line 2724)
    // if (\is_wp_error($table_charset)) == false (line 2727)
    // if (empty($this->col_meta[$tablekey])) == true (line 2733)

    $actual = $this->wpdb->get_col_charset($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_charset8()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\null !== $charset) == false (line 2715)
    // if (empty($this->is_mysql)) == false (line 2720)
    // if (empty($this->table_charset[$tablekey])) == true (line 2724)
    // if (\is_wp_error($table_charset)) == true (line 2727)

    $actual = $this->wpdb->get_col_charset($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_charset9()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\null !== $charset) == false (line 2715)
    // if (empty($this->is_mysql)) == true (line 2720)

    $actual = $this->wpdb->get_col_charset($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_charset10()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\null !== $charset) == true (line 2715)

    $actual = $this->wpdb->get_col_charset($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length0()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == false (line 2816)
    // Case 'mediumblob' == false (line 2822)
    // Case 'mediumtext' == false (line 2823)
    // Case 'longblob' == false (line 2829)
    // Case 'longtext' == false (line 2830)
    // Default (line 2836)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length1()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == false (line 2816)
    // Case 'mediumblob' == false (line 2822)
    // Case 'mediumtext' == false (line 2823)
    // Case 'longblob' == false (line 2829)
    // Case 'longtext' == true (line 2830)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length2()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == false (line 2816)
    // Case 'mediumblob' == false (line 2822)
    // Case 'mediumtext' == false (line 2823)
    // Case 'longblob' == true (line 2829)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length3()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == false (line 2816)
    // Case 'mediumblob' == false (line 2822)
    // Case 'mediumtext' == true (line 2823)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length4()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == false (line 2816)
    // Case 'mediumblob' == true (line 2822)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length5()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == true (line 2816)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length6()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == true (line 2815)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length7()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == true (line 2809)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length8()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == true (line 2808)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length9()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == true (line 2802)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length10()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == true (line 2801)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length11()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == true (line 2795)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length12()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == true (line 2794)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length13()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == false (line 2816)
    // Case 'mediumblob' == false (line 2822)
    // Case 'mediumtext' == false (line 2823)
    // Case 'longblob' == false (line 2829)
    // Case 'longtext' == false (line 2830)
    // Default (line 2836)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length14()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == false (line 2816)
    // Case 'mediumblob' == false (line 2822)
    // Case 'mediumtext' == false (line 2823)
    // Case 'longblob' == false (line 2829)
    // Case 'longtext' == true (line 2830)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length15()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == false (line 2816)
    // Case 'mediumblob' == false (line 2822)
    // Case 'mediumtext' == false (line 2823)
    // Case 'longblob' == true (line 2829)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length16()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == false (line 2816)
    // Case 'mediumblob' == false (line 2822)
    // Case 'mediumtext' == true (line 2823)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length17()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == false (line 2816)
    // Case 'mediumblob' == true (line 2822)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length18()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == true (line 2816)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length19()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == true (line 2815)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length20()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == true (line 2809)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length21()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == true (line 2808)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length22()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == true (line 2802)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length23()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == true (line 2801)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length24()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == true (line 2795)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length25()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == true (line 2794)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length26()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == false (line 2772)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == true (line 2780)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length27()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == false (line 2816)
    // Case 'mediumblob' == false (line 2822)
    // Case 'mediumtext' == false (line 2823)
    // Case 'longblob' == false (line 2829)
    // Case 'longtext' == false (line 2830)
    // Default (line 2836)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length28()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == false (line 2816)
    // Case 'mediumblob' == false (line 2822)
    // Case 'mediumtext' == false (line 2823)
    // Case 'longblob' == false (line 2829)
    // Case 'longtext' == true (line 2830)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length29()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == false (line 2816)
    // Case 'mediumblob' == false (line 2822)
    // Case 'mediumtext' == false (line 2823)
    // Case 'longblob' == true (line 2829)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length30()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == false (line 2816)
    // Case 'mediumblob' == false (line 2822)
    // Case 'mediumtext' == true (line 2823)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length31()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == false (line 2816)
    // Case 'mediumblob' == true (line 2822)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length32()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == true (line 2816)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length33()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == true (line 2815)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length34()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == true (line 2809)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length35()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == true (line 2808)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length36()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == true (line 2802)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length37()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == true (line 2801)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length38()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == true (line 2795)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length39()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == false (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == true (line 2794)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length40()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == false (line 2816)
    // Case 'mediumblob' == false (line 2822)
    // Case 'mediumtext' == false (line 2823)
    // Case 'longblob' == false (line 2829)
    // Case 'longtext' == false (line 2830)
    // Default (line 2836)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length41()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == false (line 2816)
    // Case 'mediumblob' == false (line 2822)
    // Case 'mediumtext' == false (line 2823)
    // Case 'longblob' == false (line 2829)
    // Case 'longtext' == true (line 2830)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length42()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == false (line 2816)
    // Case 'mediumblob' == false (line 2822)
    // Case 'mediumtext' == false (line 2823)
    // Case 'longblob' == true (line 2829)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length43()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == false (line 2816)
    // Case 'mediumblob' == false (line 2822)
    // Case 'mediumtext' == true (line 2823)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length44()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == false (line 2816)
    // Case 'mediumblob' == true (line 2822)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length45()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == false (line 2815)
    // Case 'text' == true (line 2816)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length46()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == false (line 2809)
    // Case 'blob' == true (line 2815)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length47()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == false (line 2808)
    // Case 'tinytext' == true (line 2809)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length48()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == false (line 2802)
    // Case 'tinyblob' == true (line 2808)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length49()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == false (line 2801)
    // Case 'varbinary' == true (line 2802)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length50()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == false (line 2795)
    // Case 'binary' == true (line 2801)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length51()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == false (line 2794)
    // Case 'varchar' == true (line 2795)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length52()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == false (line 2780)
    // if (!empty($typeinfo[1])) == true (line 2787)
    // switch ($type) (line 2793)
    // Case 'char' == true (line 2794)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length53()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == false (line 2775)
    // if (empty($this->col_meta[$tablekey][$columnkey])) == true (line 2780)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length54()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == false (line 2768)
    // if (empty($this->col_meta[$tablekey])) == true (line 2772)
    // if (\is_wp_error($table_charset)) == true (line 2775)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_length55()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($this->is_mysql)) == true (line 2768)

    $actual = $this->wpdb->get_col_length($table, $column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStrip_invalid_text_for_column0()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_string($value)) == false (line 3136)
    // if (!$charset) == false (line 3141)
    // if (\is_wp_error($charset)) == false (line 3144)
    // if (\is_wp_error($data)) == false (line 3158)

    $actual = $this->wpdb->strip_invalid_text_for_column($table, $column, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStrip_invalid_text_for_column1()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_string($value)) == false (line 3136)
    // if (!$charset) == false (line 3141)
    // if (\is_wp_error($charset)) == false (line 3144)
    // if (\is_wp_error($data)) == true (line 3158)

    $actual = $this->wpdb->strip_invalid_text_for_column($table, $column, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStrip_invalid_text_for_column2()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_string($value)) == false (line 3136)
    // if (!$charset) == false (line 3141)
    // if (\is_wp_error($charset)) == true (line 3144)

    $actual = $this->wpdb->strip_invalid_text_for_column($table, $column, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStrip_invalid_text_for_column3()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_string($value)) == false (line 3136)
    // if (!$charset) == true (line 3141)

    $actual = $this->wpdb->strip_invalid_text_for_column($table, $column, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStrip_invalid_text_for_column4()
{
    $table = m::mock('UntypedParameter_table_');
    $column = m::mock('UntypedParameter_column_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_string($value)) == true (line 3136)

    $actual = $this->wpdb->strip_invalid_text_for_column($table, $column, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_info0()
{
    $info_type = m::mock('UntypedParameter_info_type_');
    $col_offset = m::mock('UntypedParameter_col_offset_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->col_info) == false (line 3269)

    $actual = $this->wpdb->get_col_info($info_type, $col_offset);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_info1()
{
    $info_type = m::mock('UntypedParameter_info_type_');
    $col_offset = m::mock('UntypedParameter_col_offset_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->col_info) == true (line 3269)
    // if ($col_offset == -1) == false (line 3270)

    $actual = $this->wpdb->get_col_info($info_type, $col_offset);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_info2()
{
    $info_type = m::mock('UntypedParameter_info_type_');
    $col_offset = m::mock('UntypedParameter_col_offset_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->col_info) == true (line 3269)
    // if ($col_offset == -1) == true (line 3270)

    $actual = $this->wpdb->get_col_info($info_type, $col_offset);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_col_info3()
{
    $info_type = m::mock('UntypedParameter_info_type_');
    $col_offset = m::mock('UntypedParameter_col_offset_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->col_info) == true (line 3269)
    // if ($col_offset == -1) == true (line 3270)

    $actual = $this->wpdb->get_col_info($info_type, $col_offset);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTimer_start0()
{
    // TODO: Your mock expectations here

    $actual = $this->wpdb->timer_start();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTimer_stop0()
{
    // TODO: Your mock expectations here

    $actual = $this->wpdb->timer_stop();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBail0()
{
    $message = m::mock('UntypedParameter_message_');
    $error_code = m::mock('UntypedParameter_error_code_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->show_errors) == false (line 3319)

    $actual = $this->wpdb->bail($message, $error_code);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBail1()
{
    $message = m::mock('UntypedParameter_message_');
    $error_code = m::mock('UntypedParameter_error_code_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->show_errors) == true (line 3319)
    // if (\class_exists('WP_Error', \false)) == false (line 3320)

    $actual = $this->wpdb->bail($message, $error_code);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBail2()
{
    $message = m::mock('UntypedParameter_message_');
    $error_code = m::mock('UntypedParameter_error_code_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->show_errors) == true (line 3319)
    // if (\class_exists('WP_Error', \false)) == true (line 3320)

    $actual = $this->wpdb->bail($message, $error_code);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testClose0()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->dbh) == false (line 3340)
    // if ($this->use_mysqli) == false (line 3344)
    // if ($closed) == false (line 3350)

    $actual = $this->wpdb->close();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testClose1()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->dbh) == false (line 3340)
    // if ($this->use_mysqli) == false (line 3344)
    // if ($closed) == true (line 3350)

    $actual = $this->wpdb->close();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testClose2()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->dbh) == false (line 3340)
    // if ($this->use_mysqli) == true (line 3344)
    // if ($closed) == false (line 3350)

    $actual = $this->wpdb->close();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testClose3()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->dbh) == false (line 3340)
    // if ($this->use_mysqli) == true (line 3344)
    // if ($closed) == true (line 3350)

    $actual = $this->wpdb->close();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testClose4()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!$this->dbh) == true (line 3340)

    $actual = $this->wpdb->close();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_database_version0()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\version_compare($this->db_version(), $required_mysql_version, '<')) == false (line 3372)

    $actual = $this->wpdb->check_database_version();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCheck_database_version1()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\version_compare($this->db_version(), $required_mysql_version, '<')) == true (line 3372)

    $actual = $this->wpdb->check_database_version();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSupports_collation0()
{
    // TODO: Your mock expectations here

    $actual = $this->wpdb->supports_collation();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_charset_collate0()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!empty($this->charset)) == false (line 3405)
    // if (!empty($this->collate)) == false (line 3408)

    $actual = $this->wpdb->get_charset_collate();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_charset_collate1()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!empty($this->charset)) == false (line 3405)
    // if (!empty($this->collate)) == true (line 3408)

    $actual = $this->wpdb->get_charset_collate();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_charset_collate2()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!empty($this->charset)) == true (line 3405)
    // if (!empty($this->collate)) == false (line 3408)

    $actual = $this->wpdb->get_charset_collate();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_charset_collate3()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!empty($this->charset)) == true (line 3405)
    // if (!empty($this->collate)) == true (line 3408)

    $actual = $this->wpdb->get_charset_collate();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testHas_cap0()
{
    $db_cap = m::mock('UntypedParameter_db_cap_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch (\strtolower($db_cap)) (line 3432)
    // Case 'collation' == false (line 3433)
    // Case 'group_concat' == false (line 3434)
    // Case 'subqueries' == false (line 3435)
    // Case 'set_charset' == false (line 3437)
    // Case 'utf8mb4' == false (line 3439)
    // Case 'utf8mb4_520' == false (line 3459)

    $actual = $this->wpdb->has_cap($db_cap);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testHas_cap1()
{
    $db_cap = m::mock('UntypedParameter_db_cap_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch (\strtolower($db_cap)) (line 3432)
    // Case 'collation' == false (line 3433)
    // Case 'group_concat' == false (line 3434)
    // Case 'subqueries' == false (line 3435)
    // Case 'set_charset' == false (line 3437)
    // Case 'utf8mb4' == false (line 3439)
    // Case 'utf8mb4_520' == true (line 3459)

    $actual = $this->wpdb->has_cap($db_cap);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testHas_cap2()
{
    $db_cap = m::mock('UntypedParameter_db_cap_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch (\strtolower($db_cap)) (line 3432)
    // Case 'collation' == false (line 3433)
    // Case 'group_concat' == false (line 3434)
    // Case 'subqueries' == false (line 3435)
    // Case 'set_charset' == false (line 3437)
    // Case 'utf8mb4' == true (line 3439)
    // if (\version_compare($version, '5.5.3', '<')) == false (line 3440)
    // if ($this->use_mysqli) == false (line 3443)
    // if (\false !== \strpos($client_version, 'mysqlnd')) == false (line 3453)

    $actual = $this->wpdb->has_cap($db_cap);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testHas_cap3()
{
    $db_cap = m::mock('UntypedParameter_db_cap_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch (\strtolower($db_cap)) (line 3432)
    // Case 'collation' == false (line 3433)
    // Case 'group_concat' == false (line 3434)
    // Case 'subqueries' == false (line 3435)
    // Case 'set_charset' == false (line 3437)
    // Case 'utf8mb4' == true (line 3439)
    // if (\version_compare($version, '5.5.3', '<')) == false (line 3440)
    // if ($this->use_mysqli) == false (line 3443)
    // if (\false !== \strpos($client_version, 'mysqlnd')) == true (line 3453)

    $actual = $this->wpdb->has_cap($db_cap);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testHas_cap4()
{
    $db_cap = m::mock('UntypedParameter_db_cap_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch (\strtolower($db_cap)) (line 3432)
    // Case 'collation' == false (line 3433)
    // Case 'group_concat' == false (line 3434)
    // Case 'subqueries' == false (line 3435)
    // Case 'set_charset' == false (line 3437)
    // Case 'utf8mb4' == true (line 3439)
    // if (\version_compare($version, '5.5.3', '<')) == false (line 3440)
    // if ($this->use_mysqli) == true (line 3443)
    // if (\false !== \strpos($client_version, 'mysqlnd')) == false (line 3453)

    $actual = $this->wpdb->has_cap($db_cap);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testHas_cap5()
{
    $db_cap = m::mock('UntypedParameter_db_cap_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch (\strtolower($db_cap)) (line 3432)
    // Case 'collation' == false (line 3433)
    // Case 'group_concat' == false (line 3434)
    // Case 'subqueries' == false (line 3435)
    // Case 'set_charset' == false (line 3437)
    // Case 'utf8mb4' == true (line 3439)
    // if (\version_compare($version, '5.5.3', '<')) == false (line 3440)
    // if ($this->use_mysqli) == true (line 3443)
    // if (\false !== \strpos($client_version, 'mysqlnd')) == true (line 3453)

    $actual = $this->wpdb->has_cap($db_cap);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testHas_cap6()
{
    $db_cap = m::mock('UntypedParameter_db_cap_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch (\strtolower($db_cap)) (line 3432)
    // Case 'collation' == false (line 3433)
    // Case 'group_concat' == false (line 3434)
    // Case 'subqueries' == false (line 3435)
    // Case 'set_charset' == false (line 3437)
    // Case 'utf8mb4' == true (line 3439)
    // if (\version_compare($version, '5.5.3', '<')) == true (line 3440)

    $actual = $this->wpdb->has_cap($db_cap);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testHas_cap7()
{
    $db_cap = m::mock('UntypedParameter_db_cap_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch (\strtolower($db_cap)) (line 3432)
    // Case 'collation' == false (line 3433)
    // Case 'group_concat' == false (line 3434)
    // Case 'subqueries' == false (line 3435)
    // Case 'set_charset' == true (line 3437)

    $actual = $this->wpdb->has_cap($db_cap);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testHas_cap8()
{
    $db_cap = m::mock('UntypedParameter_db_cap_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch (\strtolower($db_cap)) (line 3432)
    // Case 'collation' == false (line 3433)
    // Case 'group_concat' == false (line 3434)
    // Case 'subqueries' == true (line 3435)

    $actual = $this->wpdb->has_cap($db_cap);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testHas_cap9()
{
    $db_cap = m::mock('UntypedParameter_db_cap_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch (\strtolower($db_cap)) (line 3432)
    // Case 'collation' == false (line 3433)
    // Case 'group_concat' == true (line 3434)

    $actual = $this->wpdb->has_cap($db_cap);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testHas_cap10()
{
    $db_cap = m::mock('UntypedParameter_db_cap_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // switch (\strtolower($db_cap)) (line 3432)
    // Case 'collation' == true (line 3433)

    $actual = $this->wpdb->has_cap($db_cap);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_caller0()
{
    // TODO: Your mock expectations here

    $actual = $this->wpdb->get_caller();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_version0()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == false (line 3488)

    $actual = $this->wpdb->db_version();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testDb_version1()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->use_mysqli) == true (line 3488)

    $actual = $this->wpdb->db_version();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}
}
