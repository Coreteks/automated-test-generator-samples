<?php

namespace tests;

use Mockery as m;
use Walker_Page;

class Walker_PageTest extends \PHPUnit_Framework_TestCase
{
/**
* @var \Walker_Page
*/
protected $walker_Page;

public function setUp()
{
    parent::setUp();

    $this->walker_Page = new \Walker_Page();
}

public function testStart_lvl0()
{
    $output = m::mock('UntypedParameter_output_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 56)

    $actual = $this->walker_Page->start_lvl($output, $depth, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_lvl1()
{
    $output = m::mock('UntypedParameter_output_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 56)

    $actual = $this->walker_Page->start_lvl($output, $depth, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEnd_lvl0()
{
    $output = m::mock('UntypedParameter_output_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 80)

    $actual = $this->walker_Page->end_lvl($output, $depth, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEnd_lvl1()
{
    $output = m::mock('UntypedParameter_output_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 80)

    $actual = $this->walker_Page->end_lvl($output, $depth, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el0()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el2()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el3()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el4()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el5()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el6()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el7()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el8()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el9()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el10()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el11()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el12()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el13()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el14()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el15()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el16()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el17()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el18()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el19()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el20()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el21()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el22()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el23()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el24()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el25()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el26()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el27()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el28()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el29()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el30()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el31()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el32()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el33()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el34()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el35()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el36()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el37()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el38()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el39()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el40()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el41()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el42()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el43()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el44()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el45()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el46()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el47()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el48()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el49()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el50()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el51()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el52()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el53()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el54()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el55()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el56()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el57()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el58()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el59()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el60()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el61()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el62()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el63()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el64()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el65()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el66()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el67()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el68()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el69()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el70()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el71()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el72()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el73()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el74()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el75()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el76()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el77()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el78()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el79()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el80()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el81()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el82()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el83()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el84()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el85()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el86()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el87()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el88()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el89()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el90()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el91()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el92()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el93()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el94()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el95()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el96()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el97()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el98()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el99()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el100()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el101()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el102()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el103()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el104()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el105()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el106()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el107()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el108()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el109()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el110()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el111()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el112()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el113()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el114()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el115()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el116()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el117()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el118()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el119()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el120()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el121()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el122()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el123()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el124()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el125()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el126()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el127()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el128()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el129()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el130()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el131()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el132()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el133()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el134()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el135()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el136()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el137()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el138()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el139()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el140()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el141()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el142()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el143()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el144()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el145()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el146()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el147()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el148()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el149()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el150()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el151()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el152()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el153()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el154()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el155()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el156()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el157()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el158()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el159()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el160()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el161()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el162()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el163()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el164()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el165()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el166()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el167()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el168()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el169()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el170()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el171()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el172()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el173()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el174()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el175()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el176()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el177()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el178()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el179()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el180()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el181()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el182()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el183()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el184()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el185()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el186()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el187()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el188()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el189()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el190()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el191()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el192()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el193()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el194()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el195()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el196()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el197()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el198()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el199()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el200()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el201()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el202()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el203()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el204()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el205()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el206()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el207()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el208()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el209()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el210()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el211()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el212()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el213()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el214()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el215()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el216()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el217()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el218()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el219()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el220()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el221()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el222()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el223()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el224()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el225()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el226()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el227()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el228()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el229()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el230()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el231()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el232()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el233()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el234()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el235()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el236()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el237()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el238()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el239()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el240()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el241()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el242()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el243()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el244()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el245()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el246()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el247()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el248()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el249()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el250()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el251()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el252()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el253()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el254()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el255()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el256()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el257()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el258()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el259()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el260()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el261()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el262()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el263()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el264()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el265()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el266()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el267()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el268()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el269()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el270()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el271()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el272()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el273()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el274()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el275()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el276()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el277()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el278()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el279()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el280()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el281()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el282()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el283()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el284()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el285()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el286()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el287()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el288()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el289()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el290()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el291()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el292()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el293()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el294()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el295()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el296()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el297()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el298()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el299()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el300()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el301()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el302()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el303()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el304()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el305()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el306()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el307()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el308()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el309()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el310()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el311()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el312()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el313()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el314()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el315()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el316()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el317()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el318()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el319()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el320()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el321()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el322()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el323()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el324()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el325()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el326()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el327()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el328()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el329()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el330()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el331()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el332()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el333()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el334()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el335()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el336()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el337()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el338()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el339()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el340()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el341()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el342()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el343()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el344()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el345()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el346()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el347()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el348()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el349()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el350()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el351()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el352()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el353()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el354()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el355()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el356()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el357()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el358()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el359()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el360()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el361()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el362()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el363()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el364()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el365()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el366()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el367()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el368()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el369()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el370()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el371()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el372()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el373()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el374()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el375()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el376()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el377()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el378()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el379()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el380()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el381()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el382()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el383()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el384()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el385()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el386()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el387()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el388()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el389()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el390()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el391()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el392()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el393()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el394()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el395()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el396()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el397()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el398()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el399()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el400()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el401()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el402()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el403()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el404()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el405()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el406()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el407()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el408()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el409()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el410()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el411()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el412()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el413()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el414()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el415()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el416()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el417()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el418()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el419()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el420()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el421()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el422()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el423()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el424()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el425()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el426()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el427()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el428()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el429()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el430()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el431()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el432()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el433()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el434()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el435()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el436()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el437()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el438()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el439()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el440()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el441()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el442()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el443()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el444()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el445()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el446()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el447()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el448()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el449()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el450()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el451()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el452()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el453()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el454()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el455()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el456()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el457()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el458()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el459()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el460()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el461()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el462()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el463()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el464()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el465()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el466()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el467()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el468()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el469()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el470()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el471()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el472()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el473()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el474()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el475()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el476()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el477()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el478()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el479()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el480()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el481()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el482()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el483()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el484()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el485()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el486()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el487()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el488()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el489()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el490()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el491()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el492()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el493()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el494()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el495()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el496()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el497()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el498()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el499()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el500()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el501()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el502()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el503()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el504()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el505()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el506()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el507()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el508()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el509()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el510()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el511()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el512()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el513()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el514()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el515()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el516()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el517()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el518()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el519()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el520()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el521()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el522()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el523()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el524()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el525()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el526()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el527()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el528()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el529()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el530()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el531()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el532()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el533()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el534()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el535()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el536()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el537()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el538()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el539()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el540()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el541()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el542()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el543()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el544()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el545()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el546()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el547()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el548()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el549()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el550()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el551()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el552()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el553()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el554()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el555()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el556()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el557()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el558()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el559()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el560()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el561()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el562()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el563()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el564()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el565()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el566()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el567()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el568()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el569()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el570()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el571()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el572()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el573()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el574()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el575()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el576()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el577()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el578()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el579()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el580()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el581()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el582()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el583()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el584()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el585()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el586()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el587()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el588()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el589()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el590()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el591()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el592()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el593()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el594()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el595()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el596()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el597()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el598()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el599()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el600()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el601()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el602()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el603()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el604()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el605()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el606()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el607()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el608()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el609()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el610()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el611()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el612()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el613()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el614()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el615()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el616()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el617()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el618()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el619()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el620()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el621()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el622()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el623()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el624()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el625()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el626()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el627()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el628()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el629()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el630()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el631()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el632()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el633()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el634()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el635()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el636()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el637()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el638()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el639()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el640()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el641()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el642()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el643()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el644()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el645()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el646()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el647()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el648()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el649()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el650()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el651()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el652()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el653()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el654()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el655()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el656()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el657()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el658()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el659()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el660()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el661()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el662()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el663()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el664()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el665()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el666()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el667()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el668()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el669()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el670()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el671()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el672()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el673()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el674()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el675()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el676()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el677()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el678()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el679()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el680()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el681()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el682()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el683()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el684()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el685()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el686()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el687()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el688()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el689()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el690()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el691()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el692()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el693()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el694()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el695()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el696()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el697()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el698()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el699()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el700()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el701()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el702()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el703()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el704()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el705()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el706()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el707()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el708()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el709()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el710()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el711()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el712()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el713()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el714()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el715()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el716()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el717()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el718()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el719()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el720()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el721()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el722()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el723()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el724()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el725()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el726()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el727()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el728()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el729()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el730()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el731()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el732()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el733()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el734()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el735()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el736()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el737()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el738()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el739()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el740()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el741()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el742()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el743()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el744()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el745()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el746()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el747()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el748()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el749()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el750()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el751()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el752()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el753()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el754()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el755()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el756()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el757()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el758()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el759()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el760()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el761()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el762()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el763()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el764()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el765()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el766()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el767()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el768()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el769()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el770()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el771()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el772()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el773()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el774()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el775()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el776()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el777()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el778()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el779()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el780()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el781()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el782()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el783()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el784()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el785()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el786()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el787()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el788()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el789()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el790()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el791()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el792()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el793()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el794()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el795()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el796()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el797()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el798()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el799()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el800()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el801()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el802()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el803()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el804()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el805()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el806()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el807()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el808()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el809()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el810()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el811()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el812()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el813()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el814()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el815()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el816()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el817()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el818()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el819()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el820()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el821()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el822()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el823()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el824()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el825()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el826()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el827()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el828()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el829()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el830()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el831()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el832()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el833()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el834()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el835()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el836()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el837()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el838()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el839()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el840()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el841()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el842()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el843()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el844()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el845()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el846()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el847()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el848()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el849()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el850()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el851()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el852()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el853()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el854()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el855()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el856()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el857()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el858()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el859()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el860()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el861()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el862()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el863()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == false (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el864()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el865()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el866()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el867()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el868()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el869()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el870()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el871()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el872()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el873()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el874()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el875()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el876()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el877()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el878()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el879()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el880()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el881()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el882()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el883()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el884()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el885()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el886()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el887()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el888()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el889()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el890()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el891()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el892()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el893()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el894()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el895()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el896()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el897()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el898()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el899()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el900()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el901()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el902()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el903()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el904()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el905()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el906()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el907()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el908()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el909()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el910()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el911()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el912()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el913()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el914()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el915()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el916()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el917()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el918()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el919()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el920()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el921()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el922()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el923()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el924()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el925()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el926()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el927()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el928()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el929()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el930()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el931()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el932()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el933()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el934()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el935()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el936()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el937()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el938()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el939()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el940()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el941()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el942()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el943()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el944()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el945()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el946()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el947()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el948()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el949()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el950()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el951()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el952()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el953()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el954()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el955()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el956()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el957()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el958()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el959()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el960()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el961()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el962()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el963()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el964()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el965()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el966()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el967()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el968()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el969()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el970()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el971()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el972()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el973()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el974()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el975()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el976()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el977()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el978()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el979()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el980()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el981()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el982()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el983()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el984()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el985()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el986()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el987()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el988()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el989()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el990()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el991()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el992()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el993()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el994()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el995()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el996()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el997()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el998()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el999()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1000()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1001()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1002()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1003()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1004()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1005()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1006()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1007()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == false (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1008()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1009()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1010()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1011()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1012()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1013()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1014()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1015()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1016()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1017()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1018()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1019()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1020()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1021()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1022()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1023()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1024()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1025()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == false (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1026()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1027()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1028()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1029()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1030()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1031()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1032()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1033()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1034()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1035()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1036()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1037()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1038()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1039()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1040()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1041()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1042()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1043()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == false (line 123)
    // if ($page->ID == \get_option('page_for_posts')) == true (line 133)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1044()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1045()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1046()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1047()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1048()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1049()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1050()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1051()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1052()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1053()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1054()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1055()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1056()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1057()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1058()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1059()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1060()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1061()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1062()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1063()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1064()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1065()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1066()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1067()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1068()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1069()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1070()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1071()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1072()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1073()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1074()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1075()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1076()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1077()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1078()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1079()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1080()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1081()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1082()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1083()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1084()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1085()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1086()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1087()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1088()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1089()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1090()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1091()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1092()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1093()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1094()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1095()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1096()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1097()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == false (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1098()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1099()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1100()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1101()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1102()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1103()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1104()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1105()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1106()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1107()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1108()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1109()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1110()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1111()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1112()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1113()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1114()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1115()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == false (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1116()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1117()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1118()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1119()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1120()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1121()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1122()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1123()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1124()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1125()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1126()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1127()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1128()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1129()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1130()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1131()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1132()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1133()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == false (line 128)
    // if ($_current_page && $page->ID == $_current_page->post_parent) == true (line 130)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1134()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1135()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1136()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1137()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1138()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1139()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1140()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1141()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1142()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == false (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1143()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1144()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1145()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1146()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1147()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1148()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == false (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1149()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == false (line 199)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1150()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == false (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStart_el1151()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');
    $current_page = m::mock('UntypedParameter_current_page_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 104)
    // if ($depth) == true (line 111)
    // if (isset($args['pages_with_children'][$page->ID])) == true (line 119)
    // if (!empty($current_page)) == true (line 123)
    // if ($_current_page && \in_array($page->ID, $_current_page->ancestors)) == true (line 125)
    // if ($page->ID == $current_page) == true (line 128)
    // if ('' === $page->post_title) == true (line 153)
    // if (!empty($value)) == true (line 183)
    // if (!empty($args['show_date'])) == true (line 199)
    // if ('modified' == $args['show_date']) == true (line 200)

    $actual = $this->walker_Page->start_el($output, $page, $depth, $args, $current_page);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEnd_el0()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == false (line 224)

    $actual = $this->walker_Page->end_el($output, $page, $depth, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEnd_el1()
{
    $output = m::mock('UntypedParameter_output_');
    $page = m::mock('UntypedParameter_page_');
    $depth = m::mock('UntypedParameter_depth_');
    $args = m::mock('UntypedParameter_args_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($args['item_spacing']) && 'preserve' === $args['item_spacing']) == true (line 224)

    $actual = $this->walker_Page->end_el($output, $page, $depth, $args);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}
}
