<?php

namespace tests;

use Mockery as m;
use getid3_lyrics3;

class getid3_lyrics3Test extends \PHPUnit_Framework_TestCase
{
/**
* @var \getid3_lyrics3
*/
protected $getid3_lyrics3;

public function setUp()
{
    parent::setUp();

    $this->getid3_lyrics3 = new \getid3_lyrics3();
}

public function testAnalyze0()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == false (line 70)
    // if (isset($lyrics3offset)) == false (line 99)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze1()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == false (line 70)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == false (line 103)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze2()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == false (line 70)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == false (line 104)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze3()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == false (line 70)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == false (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == false (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze4()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == false (line 70)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == false (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == true (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze5()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == false (line 70)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == true (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == false (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze6()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == false (line 70)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == true (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == true (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze7()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == true (line 70)
    // if ($lyrics3end == 'LYRICSEND') == false (line 76)
    // if ($lyrics3end == 'LYRICS200') == false (line 85)
    // if (isset($lyrics3offset)) == false (line 99)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze8()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == true (line 70)
    // if ($lyrics3end == 'LYRICSEND') == false (line 76)
    // if ($lyrics3end == 'LYRICS200') == false (line 85)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == false (line 103)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze9()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == true (line 70)
    // if ($lyrics3end == 'LYRICSEND') == false (line 76)
    // if ($lyrics3end == 'LYRICS200') == false (line 85)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == false (line 104)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze10()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == true (line 70)
    // if ($lyrics3end == 'LYRICSEND') == false (line 76)
    // if ($lyrics3end == 'LYRICS200') == false (line 85)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == false (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == false (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze11()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == true (line 70)
    // if ($lyrics3end == 'LYRICSEND') == false (line 76)
    // if ($lyrics3end == 'LYRICS200') == false (line 85)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == false (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == true (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze12()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == true (line 70)
    // if ($lyrics3end == 'LYRICSEND') == false (line 76)
    // if ($lyrics3end == 'LYRICS200') == false (line 85)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == true (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == false (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze13()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == true (line 70)
    // if ($lyrics3end == 'LYRICSEND') == false (line 76)
    // if ($lyrics3end == 'LYRICS200') == false (line 85)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == true (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == true (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze14()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == true (line 70)
    // if ($lyrics3end == 'LYRICSEND') == false (line 76)
    // if ($lyrics3end == 'LYRICS200') == true (line 85)
    // if (isset($lyrics3offset)) == false (line 99)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze15()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == true (line 70)
    // if ($lyrics3end == 'LYRICSEND') == false (line 76)
    // if ($lyrics3end == 'LYRICS200') == true (line 85)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == false (line 103)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze16()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == true (line 70)
    // if ($lyrics3end == 'LYRICSEND') == false (line 76)
    // if ($lyrics3end == 'LYRICS200') == true (line 85)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == false (line 104)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze17()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == true (line 70)
    // if ($lyrics3end == 'LYRICSEND') == false (line 76)
    // if ($lyrics3end == 'LYRICS200') == true (line 85)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == false (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == false (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze18()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == true (line 70)
    // if ($lyrics3end == 'LYRICSEND') == false (line 76)
    // if ($lyrics3end == 'LYRICS200') == true (line 85)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == false (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == true (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze19()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == true (line 70)
    // if ($lyrics3end == 'LYRICSEND') == false (line 76)
    // if ($lyrics3end == 'LYRICS200') == true (line 85)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == true (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == false (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze20()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == true (line 70)
    // if ($lyrics3end == 'LYRICSEND') == false (line 76)
    // if ($lyrics3end == 'LYRICS200') == true (line 85)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == true (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == true (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze21()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == true (line 70)
    // if ($lyrics3end == 'LYRICSEND') == true (line 76)
    // if (isset($lyrics3offset)) == false (line 99)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze22()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == true (line 70)
    // if ($lyrics3end == 'LYRICSEND') == true (line 76)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == false (line 103)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze23()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == true (line 70)
    // if ($lyrics3end == 'LYRICSEND') == true (line 76)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == false (line 104)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze24()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == true (line 70)
    // if ($lyrics3end == 'LYRICSEND') == true (line 76)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == false (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == false (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze25()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == true (line 70)
    // if ($lyrics3end == 'LYRICSEND') == true (line 76)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == false (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == true (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze26()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == true (line 70)
    // if ($lyrics3end == 'LYRICSEND') == true (line 76)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == true (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == false (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze27()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == false (line 60)
    // if (isset($info['ape']['tag_offset_start']) && $info['ape']['tag_offset_start'] > 15) == true (line 70)
    // if ($lyrics3end == 'LYRICSEND') == true (line 76)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == true (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == true (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze28()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == true (line 60)
    // if (isset($lyrics3offset)) == false (line 99)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze29()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == true (line 60)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == false (line 103)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze30()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == true (line 60)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == false (line 104)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze31()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == true (line 60)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == false (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == false (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze32()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == true (line 60)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == false (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == true (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze33()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == true (line 60)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == true (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == false (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze34()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == false (line 52)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICS200')) == true (line 60)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == true (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == true (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze35()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == true (line 52)
    // if (isset($lyrics3offset)) == false (line 99)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze36()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == true (line 52)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == false (line 103)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze37()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == true (line 52)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == false (line 104)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze38()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == true (line 52)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == false (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == false (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze39()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == true (line 52)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == false (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == true (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze40()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == true (line 52)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == true (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == false (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze41()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == false (line 44)
    // if (\substr(\strrev($lyrics3_id3v1), 0, 9) == \strrev('LYRICSEND')) == true (line 52)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == true (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == true (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze42()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == true (line 44)
    // if (isset($lyrics3offset)) == false (line 99)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze43()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == true (line 44)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == false (line 103)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze44()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == true (line 44)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == false (line 104)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze45()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == true (line 44)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == false (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == false (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze46()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == true (line 44)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == false (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == true (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze47()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == true (line 44)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == true (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == false (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze48()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == false (line 37)
    // if ($lyrics3end == 'LYRICS200') == true (line 44)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == true (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == true (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze49()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == true (line 37)
    // if (isset($lyrics3offset)) == false (line 99)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze50()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == true (line 37)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == false (line 103)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze51()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == true (line 37)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == false (line 104)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze52()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == true (line 37)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == false (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == false (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze53()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == true (line 37)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == false (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == true (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze54()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == true (line 37)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == true (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == false (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze55()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == false (line 26)
    // if ($lyrics3end == 'LYRICSEND') == true (line 37)
    // if (isset($lyrics3offset)) == true (line 99)
    // if (!isset($info['ape'])) == true (line 103)
    // if (isset($info['lyrics3']['tag_offset_start'])) == true (line 104)
    // if (!empty($getid3_temp->info['ape'])) == true (line 112)
    // if (!empty($getid3_temp->info['replay_gain'])) == true (line 115)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAnalyze56()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($info['filesize'])) == true (line 26)

    $actual = $this->getid3_lyrics3->Analyze();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data0()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == false (line 181)
    // Default (line 229)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == false (line 182)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data2()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data3()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data4()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data5()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data6()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data7()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data8()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data9()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data10()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data11()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data12()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data13()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data14()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data15()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data16()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data17()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data18()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data19()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data20()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data21()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data22()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data23()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data24()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data25()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data26()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data27()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data28()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data29()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data30()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data31()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data32()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data33()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data34()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data35()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data36()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data37()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data38()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data39()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data40()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data41()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data42()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data43()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data44()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data45()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data46()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data47()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data48()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data49()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data50()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data51()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data52()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data53()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data54()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data55()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data56()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data57()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data58()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data59()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data60()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data61()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data62()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data63()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data64()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data65()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data66()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data67()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data68()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data69()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data70()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data71()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data72()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data73()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data74()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data75()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data76()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data77()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data78()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data79()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data80()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data81()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data82()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data83()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data84()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data85()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data86()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data87()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data88()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data89()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data90()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data91()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data92()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data93()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data94()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data95()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data96()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data97()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data98()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data99()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data100()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data101()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data102()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data103()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data104()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data105()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data106()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data107()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data108()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data109()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data110()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data111()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data112()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data113()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data114()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data115()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data116()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data117()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data118()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data119()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data120()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data121()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data122()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data123()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data124()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data125()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data126()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data127()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data128()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data129()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data130()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data131()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data132()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data133()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data134()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data135()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data136()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data137()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data138()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data139()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data140()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data141()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data142()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data143()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data144()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data145()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data146()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data147()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data148()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data149()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data150()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data151()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data152()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data153()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data154()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data155()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data156()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data157()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data158()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data159()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data160()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data161()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data162()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data163()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data164()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data165()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data166()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data167()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data168()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data169()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data170()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data171()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data172()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data173()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data174()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data175()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data176()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data177()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data178()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data179()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data180()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data181()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data182()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data183()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data184()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data185()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data186()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data187()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data188()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data189()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data190()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data191()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data192()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data193()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data194()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data195()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data196()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data197()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data198()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data199()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data200()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data201()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data202()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data203()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data204()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data205()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data206()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data207()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data208()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data209()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data210()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data211()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data212()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data213()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data214()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data215()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data216()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data217()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data218()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data219()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data220()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data221()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data222()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data223()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data224()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data225()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data226()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data227()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data228()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data229()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data230()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data231()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data232()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data233()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data234()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data235()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data236()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data237()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data238()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data239()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data240()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data241()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data242()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data243()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data244()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data245()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data246()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data247()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data248()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data249()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data250()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data251()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data252()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data253()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data254()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data255()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data256()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data257()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data258()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data259()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data260()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data261()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data262()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data263()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data264()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data265()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data266()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data267()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data268()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data269()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data270()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data271()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data272()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data273()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data274()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data275()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data276()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data277()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data278()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data279()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data280()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data281()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data282()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data283()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data284()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data285()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data286()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data287()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data288()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data289()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data290()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data291()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data292()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data293()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data294()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data295()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data296()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data297()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data298()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data299()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data300()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data301()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data302()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data303()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data304()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data305()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data306()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data307()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data308()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data309()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data310()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data311()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data312()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data313()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data314()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data315()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data316()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data317()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data318()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data319()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data320()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data321()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data322()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data323()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data324()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data325()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data326()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data327()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data328()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data329()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data330()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data331()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data332()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data333()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data334()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data335()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data336()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data337()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data338()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data339()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data340()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data341()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data342()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data343()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data344()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data345()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data346()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data347()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data348()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data349()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data350()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data351()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data352()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data353()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data354()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data355()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data356()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data357()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data358()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data359()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data360()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data361()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data362()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data363()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data364()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data365()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data366()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data367()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data368()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data369()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data370()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data371()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data372()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data373()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data374()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data375()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data376()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data377()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data378()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data379()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data380()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data381()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data382()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data383()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data384()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data385()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data386()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data387()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data388()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data389()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data390()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data391()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data392()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data393()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data394()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data395()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data396()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data397()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data398()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data399()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data400()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data401()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data402()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data403()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data404()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data405()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data406()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data407()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data408()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data409()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data410()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data411()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data412()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data413()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data414()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data415()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data416()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data417()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data418()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data419()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data420()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data421()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data422()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data423()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data424()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data425()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data426()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data427()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data428()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data429()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data430()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data431()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data432()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data433()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data434()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data435()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data436()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data437()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data438()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data439()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data440()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data441()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data442()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data443()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data444()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data445()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data446()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data447()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data448()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data449()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data450()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data451()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data452()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data453()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data454()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data455()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data456()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data457()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data458()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data459()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data460()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data461()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data462()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data463()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data464()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data465()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data466()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data467()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data468()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data469()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data470()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data471()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data472()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data473()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data474()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data475()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data476()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data477()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data478()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data479()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data480()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data481()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data482()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data483()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data484()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data485()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data486()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data487()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data488()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data489()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data490()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data491()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data492()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data493()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data494()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data495()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data496()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data497()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data498()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data499()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data500()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data501()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data502()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data503()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data504()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data505()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data506()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data507()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data508()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data509()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data510()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data511()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data512()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data513()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data514()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data515()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data516()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data517()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data518()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data519()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data520()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data521()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data522()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data523()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data524()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data525()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data526()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data527()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data528()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data529()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data530()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data531()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data532()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data533()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data534()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data535()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data536()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data537()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data538()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data539()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data540()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data541()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data542()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data543()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data544()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data545()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data546()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data547()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data548()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data549()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data550()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data551()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data552()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data553()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data554()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data555()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data556()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data557()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data558()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data559()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data560()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data561()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data562()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data563()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data564()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data565()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data566()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data567()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data568()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data569()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data570()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data571()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data572()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data573()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data574()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data575()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data576()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data577()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data578()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data579()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data580()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data581()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data582()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data583()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data584()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data585()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data586()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data587()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data588()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data589()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data590()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data591()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data592()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data593()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data594()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data595()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data596()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data597()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data598()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data599()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data600()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data601()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data602()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data603()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data604()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data605()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data606()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data607()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data608()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data609()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data610()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data611()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data612()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data613()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data614()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data615()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data616()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data617()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data618()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data619()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data620()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data621()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data622()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data623()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data624()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data625()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data626()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data627()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data628()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data629()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data630()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data631()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data632()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data633()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data634()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data635()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data636()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data637()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data638()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data639()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data640()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data641()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data642()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data643()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data644()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data645()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data646()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data647()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data648()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data649()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data650()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data651()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data652()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data653()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data654()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data655()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data656()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data657()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data658()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data659()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data660()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data661()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data662()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data663()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data664()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data665()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data666()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data667()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data668()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data669()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data670()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data671()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data672()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data673()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data674()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data675()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data676()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data677()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data678()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data679()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data680()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data681()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data682()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data683()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data684()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data685()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data686()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data687()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data688()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data689()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data690()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data691()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data692()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data693()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data694()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data695()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data696()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data697()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data698()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data699()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data700()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data701()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data702()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data703()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data704()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data705()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data706()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data707()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data708()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data709()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data710()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data711()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data712()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data713()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data714()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data715()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data716()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data717()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data718()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data719()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data720()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data721()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data722()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data723()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data724()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data725()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data726()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data727()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data728()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data729()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data730()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data731()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data732()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data733()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data734()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data735()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data736()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data737()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data738()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data739()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data740()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data741()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data742()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data743()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data744()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data745()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data746()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data747()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data748()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data749()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data750()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data751()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data752()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data753()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data754()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data755()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data756()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data757()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data758()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data759()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data760()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data761()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data762()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data763()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data764()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data765()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data766()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data767()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data768()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data769()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data770()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == true (line 171)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICSEND') == false (line 172)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data771()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == true (line 171)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICSEND') == true (line 172)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data772()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == true (line 171)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICSEND') == true (line 172)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data773()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == true (line 171)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICSEND') == true (line 172)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data774()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == false (line 150)
    // switch ($version) (line 169)
    // Case 1 == true (line 171)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICSEND') == true (line 172)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data775()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == false (line 151)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data776()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == false (line 181)
    // Default (line 229)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data777()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == false (line 182)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data778()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data779()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data780()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data781()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data782()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data783()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data784()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data785()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data786()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data787()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data788()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data789()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data790()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data791()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data792()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data793()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data794()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data795()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data796()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data797()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data798()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data799()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data800()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data801()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data802()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data803()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data804()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data805()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data806()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data807()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data808()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data809()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data810()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data811()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data812()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data813()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data814()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data815()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data816()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data817()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data818()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data819()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data820()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data821()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data822()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data823()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data824()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data825()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data826()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data827()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data828()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data829()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data830()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data831()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data832()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data833()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data834()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data835()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data836()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data837()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data838()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data839()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data840()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data841()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data842()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data843()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data844()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data845()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data846()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data847()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data848()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data849()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data850()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data851()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data852()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data853()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data854()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data855()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data856()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data857()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data858()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data859()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data860()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data861()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data862()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data863()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data864()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data865()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data866()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data867()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data868()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data869()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data870()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data871()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data872()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data873()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data874()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data875()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data876()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data877()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data878()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data879()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data880()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data881()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data882()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data883()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data884()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data885()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data886()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data887()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data888()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data889()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data890()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data891()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data892()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data893()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data894()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data895()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data896()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data897()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data898()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data899()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data900()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data901()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data902()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data903()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data904()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data905()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data906()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data907()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data908()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data909()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data910()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data911()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data912()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data913()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data914()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data915()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data916()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data917()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data918()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data919()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data920()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data921()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data922()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data923()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data924()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data925()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data926()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data927()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data928()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data929()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data930()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data931()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data932()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data933()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data934()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data935()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data936()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data937()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data938()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data939()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data940()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data941()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data942()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data943()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data944()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data945()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data946()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data947()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data948()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data949()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data950()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data951()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data952()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data953()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data954()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data955()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data956()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data957()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data958()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data959()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data960()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data961()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data962()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data963()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data964()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data965()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data966()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data967()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data968()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data969()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data970()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data971()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data972()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data973()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data974()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data975()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data976()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data977()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data978()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data979()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data980()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data981()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data982()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data983()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data984()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data985()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data986()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data987()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data988()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data989()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data990()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data991()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data992()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data993()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data994()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data995()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data996()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data997()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data998()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data999()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1000()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1001()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1002()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1003()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1004()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1005()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1006()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1007()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1008()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1009()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1010()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1011()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1012()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1013()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1014()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1015()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1016()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1017()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1018()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1019()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1020()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1021()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1022()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1023()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1024()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1025()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1026()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1027()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1028()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1029()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1030()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1031()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1032()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1033()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1034()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1035()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1036()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1037()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1038()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1039()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1040()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1041()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1042()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1043()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1044()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1045()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1046()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1047()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1048()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1049()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1050()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1051()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1052()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1053()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1054()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1055()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1056()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1057()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1058()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1059()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1060()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1061()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1062()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1063()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1064()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1065()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1066()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1067()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1068()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1069()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1070()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1071()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1072()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1073()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1074()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1075()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1076()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1077()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1078()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1079()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1080()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1081()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1082()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1083()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1084()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1085()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1086()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1087()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1088()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1089()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1090()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1091()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1092()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1093()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1094()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1095()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1096()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1097()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1098()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1099()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1100()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1101()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1102()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1103()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1104()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1105()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1106()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1107()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1108()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1109()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1110()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1111()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1112()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1113()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1114()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1115()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1116()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1117()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1118()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1119()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1120()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1121()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1122()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1123()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1124()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1125()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1126()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1127()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1128()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1129()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1130()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1131()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1132()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1133()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1134()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1135()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1136()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1137()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1138()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1139()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1140()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1141()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1142()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1143()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1144()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1145()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1146()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1147()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1148()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1149()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1150()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1151()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1152()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1153()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1154()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1155()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1156()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1157()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1158()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1159()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1160()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1161()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1162()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1163()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1164()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1165()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1166()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1167()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1168()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1169()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1170()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1171()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1172()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1173()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1174()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1175()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1176()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1177()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1178()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1179()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1180()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1181()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1182()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1183()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1184()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1185()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1186()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1187()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1188()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1189()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1190()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1191()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1192()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1193()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1194()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1195()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1196()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1197()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1198()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1199()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1200()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1201()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1202()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1203()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1204()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1205()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1206()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1207()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1208()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1209()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1210()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1211()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1212()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1213()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1214()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1215()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1216()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1217()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1218()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1219()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1220()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1221()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1222()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1223()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1224()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1225()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1226()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1227()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1228()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1229()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1230()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1231()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1232()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1233()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1234()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1235()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1236()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1237()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1238()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1239()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1240()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1241()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1242()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1243()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1244()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1245()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1246()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1247()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1248()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1249()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1250()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1251()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1252()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1253()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1254()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1255()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1256()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1257()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == false (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1258()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1259()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1260()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1261()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1262()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1263()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1264()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1265()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1266()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1267()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1268()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1269()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1270()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1271()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1272()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1273()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1274()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1275()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1276()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1277()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1278()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1279()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1280()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1281()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1282()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1283()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1284()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1285()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1286()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1287()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1288()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1289()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1290()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1291()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1292()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1293()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1294()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1295()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1296()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1297()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1298()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1299()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1300()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1301()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1302()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1303()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1304()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1305()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1306()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1307()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1308()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1309()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1310()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1311()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1312()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1313()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1314()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1315()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1316()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1317()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1318()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1319()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1320()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1321()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1322()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1323()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1324()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1325()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1326()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1327()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1328()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1329()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1330()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1331()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1332()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1333()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1334()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1335()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1336()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1337()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1338()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1339()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1340()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1341()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1342()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1343()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1344()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1345()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1346()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1347()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1348()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1349()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1350()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1351()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1352()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1353()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1354()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1355()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1356()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1357()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1358()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1359()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1360()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1361()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1362()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1363()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1364()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1365()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1366()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1367()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1368()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1369()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1370()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1371()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1372()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1373()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1374()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1375()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1376()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1377()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1378()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1379()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1380()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1381()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1382()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1383()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1384()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1385()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1386()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1387()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1388()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1389()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1390()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1391()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1392()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1393()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1394()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1395()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1396()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1397()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1398()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1399()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1400()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1401()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1402()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1403()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1404()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1405()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1406()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1407()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1408()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1409()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1410()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1411()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1412()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1413()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1414()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1415()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1416()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1417()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1418()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1419()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1420()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1421()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1422()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1423()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1424()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1425()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1426()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1427()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1428()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1429()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1430()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1431()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1432()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1433()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1434()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1435()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1436()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1437()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1438()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1439()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1440()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1441()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1442()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1443()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1444()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1445()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1446()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1447()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1448()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1449()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == false (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1450()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1451()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1452()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1453()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1454()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1455()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1456()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1457()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1458()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1459()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1460()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1461()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1462()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1463()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1464()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1465()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1466()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1467()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1468()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1469()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1470()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1471()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1472()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1473()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1474()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1475()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1476()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1477()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1478()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1479()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1480()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1481()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1482()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1483()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1484()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1485()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1486()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1487()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1488()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1489()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1490()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1491()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1492()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1493()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1494()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1495()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1496()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1497()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1498()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1499()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1500()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1501()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1502()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1503()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1504()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1505()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1506()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1507()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1508()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1509()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1510()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1511()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1512()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1513()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == false (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1514()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1515()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1516()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1517()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1518()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1519()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1520()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1521()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == false (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1522()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1523()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1524()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1525()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1526()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1527()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1528()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1529()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1530()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1531()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1532()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1533()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1534()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1535()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1536()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1537()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == false (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1538()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1539()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1540()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1541()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == false (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1542()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1543()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1544()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1545()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == false (line 171)
    // Case 2 == true (line 181)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICS200') == true (line 182)
    // while (\strlen($rawdata) > 0) == true (line 185)
    // while (\strlen($rawdata) > 0) == false (line 185)
    // if (isset($ParsedLyrics3['raw']['IND'])) == true (line 192)
    // if (\strlen($ParsedLyrics3['raw']['IND']) > $i++) == true (line 196)
    // if (isset($ParsedLyrics3['raw'][$key])) == true (line 204)
    // if (isset($ParsedLyrics3['raw']['IMG'])) == true (line 209)
    // if (\strpos($imagestring, '||') !== \false) == true (line 212)
    // if (isset($ParsedLyrics3['raw']['LYR'])) == true (line 220)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1546()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == true (line 171)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICSEND') == false (line 172)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1547()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == true (line 171)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICSEND') == true (line 172)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == false (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1548()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == true (line 171)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICSEND') == true (line 172)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1549()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == true (line 171)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICSEND') == true (line 172)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == false (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1550()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == false (line 140)
    // if (\substr($rawdata, 0, 11) != 'LYRICSBEGIN') == true (line 150)
    // if (\strpos($rawdata, 'LYRICSBEGIN') !== \false) == true (line 151)
    // switch ($version) (line 169)
    // Case 1 == true (line 171)
    // if (\substr($rawdata, \strlen($rawdata) - 9, 9) == 'LYRICSEND') == true (line 172)
    // if (isset($info['id3v1']['tag_offset_start']) && $info['id3v1']['tag_offset_start'] <= $ParsedLyrics3['tag_offset_end']) == true (line 236)
    // if ($value == 'Some ID3v1 fields do not use NULL characters for padding') == true (line 240)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1551()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == false (line 134)
    // if ($length <= 0) == true (line 140)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLyrics3Data1552()
{
    $endoffset = m::mock('UntypedParameter_endoffset_');
    $version = m::mock('UntypedParameter_version_');
    $length = m::mock('UntypedParameter_length_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\getid3_lib::intValueSupported($endoffset)) == true (line 134)

    $actual = $this->getid3_lyrics3->getLyrics3Data($endoffset, $version, $length);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testLyrics3Timestamp2Seconds0()
{
    $rawtimestamp = m::mock('UntypedParameter_rawtimestamp_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('#^\\[([0-9]{2}):([0-9]{2})\\]$#', $rawtimestamp, $regs)) == false (line 254)

    $actual = $this->getid3_lyrics3->Lyrics3Timestamp2Seconds($rawtimestamp);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testLyrics3Timestamp2Seconds1()
{
    $rawtimestamp = m::mock('UntypedParameter_rawtimestamp_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\preg_match('#^\\[([0-9]{2}):([0-9]{2})\\]$#', $rawtimestamp, $regs)) == true (line 254)

    $actual = $this->getid3_lyrics3->Lyrics3Timestamp2Seconds($rawtimestamp);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testLyrics3LyricsTimestampParse0()
{
    $Lyrics3data = m::mock('UntypedParameter_Lyrics3data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($Lyrics3data['synchedlyrics']) && \is_array($Lyrics3data['synchedlyrics'])) == false (line 284)

    $actual = $this->getid3_lyrics3->Lyrics3LyricsTimestampParse($Lyrics3data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testLyrics3LyricsTimestampParse1()
{
    $Lyrics3data = m::mock('UntypedParameter_Lyrics3data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($Lyrics3data['synchedlyrics']) && \is_array($Lyrics3data['synchedlyrics'])) == true (line 284)

    $actual = $this->getid3_lyrics3->Lyrics3LyricsTimestampParse($Lyrics3data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testLyrics3LyricsTimestampParse2()
{
    $Lyrics3data = m::mock('UntypedParameter_Lyrics3data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == false (line 265)
    // if (isset($thislinetimestamps) && \is_array($thislinetimestamps)) == false (line 270)
    // if (isset($Lyrics3data['synchedlyrics']) && \is_array($Lyrics3data['synchedlyrics'])) == false (line 284)

    $actual = $this->getid3_lyrics3->Lyrics3LyricsTimestampParse($Lyrics3data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testLyrics3LyricsTimestampParse3()
{
    $Lyrics3data = m::mock('UntypedParameter_Lyrics3data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == false (line 265)
    // if (isset($thislinetimestamps) && \is_array($thislinetimestamps)) == false (line 270)
    // if (isset($Lyrics3data['synchedlyrics']) && \is_array($Lyrics3data['synchedlyrics'])) == true (line 284)

    $actual = $this->getid3_lyrics3->Lyrics3LyricsTimestampParse($Lyrics3data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testLyrics3LyricsTimestampParse4()
{
    $Lyrics3data = m::mock('UntypedParameter_Lyrics3data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == false (line 265)
    // if (isset($thislinetimestamps) && \is_array($thislinetimestamps)) == true (line 270)
    // if (isset($Lyrics3data['synchedlyrics']) && \is_array($Lyrics3data['synchedlyrics'])) == false (line 284)

    $actual = $this->getid3_lyrics3->Lyrics3LyricsTimestampParse($Lyrics3data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testLyrics3LyricsTimestampParse5()
{
    $Lyrics3data = m::mock('UntypedParameter_Lyrics3data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == false (line 265)
    // if (isset($thislinetimestamps) && \is_array($thislinetimestamps)) == true (line 270)
    // if (isset($Lyrics3data['synchedlyrics']) && \is_array($Lyrics3data['synchedlyrics'])) == true (line 284)

    $actual = $this->getid3_lyrics3->Lyrics3LyricsTimestampParse($Lyrics3data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testLyrics3LyricsTimestampParse6()
{
    $Lyrics3data = m::mock('UntypedParameter_Lyrics3data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == false (line 265)
    // if (isset($thislinetimestamps) && \is_array($thislinetimestamps)) == true (line 270)
    // if (isset($Lyrics3data['synchedlyrics'][$timestamp])) == false (line 273)
    // if (isset($Lyrics3data['synchedlyrics']) && \is_array($Lyrics3data['synchedlyrics'])) == false (line 284)

    $actual = $this->getid3_lyrics3->Lyrics3LyricsTimestampParse($Lyrics3data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testLyrics3LyricsTimestampParse7()
{
    $Lyrics3data = m::mock('UntypedParameter_Lyrics3data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == false (line 265)
    // if (isset($thislinetimestamps) && \is_array($thislinetimestamps)) == true (line 270)
    // if (isset($Lyrics3data['synchedlyrics'][$timestamp])) == false (line 273)
    // if (isset($Lyrics3data['synchedlyrics']) && \is_array($Lyrics3data['synchedlyrics'])) == true (line 284)

    $actual = $this->getid3_lyrics3->Lyrics3LyricsTimestampParse($Lyrics3data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testLyrics3LyricsTimestampParse8()
{
    $Lyrics3data = m::mock('UntypedParameter_Lyrics3data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == false (line 265)
    // if (isset($thislinetimestamps) && \is_array($thislinetimestamps)) == true (line 270)
    // if (isset($Lyrics3data['synchedlyrics'][$timestamp])) == true (line 273)
    // if (isset($Lyrics3data['synchedlyrics']) && \is_array($Lyrics3data['synchedlyrics'])) == false (line 284)

    $actual = $this->getid3_lyrics3->Lyrics3LyricsTimestampParse($Lyrics3data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testLyrics3LyricsTimestampParse9()
{
    $Lyrics3data = m::mock('UntypedParameter_Lyrics3data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == false (line 265)
    // if (isset($thislinetimestamps) && \is_array($thislinetimestamps)) == true (line 270)
    // if (isset($Lyrics3data['synchedlyrics'][$timestamp])) == true (line 273)
    // if (isset($Lyrics3data['synchedlyrics']) && \is_array($Lyrics3data['synchedlyrics'])) == true (line 284)

    $actual = $this->getid3_lyrics3->Lyrics3LyricsTimestampParse($Lyrics3data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testLyrics3LyricsTimestampParse10()
{
    $Lyrics3data = m::mock('UntypedParameter_Lyrics3data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == true (line 265)
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == false (line 265)
    // if (isset($thislinetimestamps) && \is_array($thislinetimestamps)) == false (line 270)
    // if (isset($Lyrics3data['synchedlyrics']) && \is_array($Lyrics3data['synchedlyrics'])) == false (line 284)

    $actual = $this->getid3_lyrics3->Lyrics3LyricsTimestampParse($Lyrics3data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testLyrics3LyricsTimestampParse11()
{
    $Lyrics3data = m::mock('UntypedParameter_Lyrics3data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == true (line 265)
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == false (line 265)
    // if (isset($thislinetimestamps) && \is_array($thislinetimestamps)) == false (line 270)
    // if (isset($Lyrics3data['synchedlyrics']) && \is_array($Lyrics3data['synchedlyrics'])) == true (line 284)

    $actual = $this->getid3_lyrics3->Lyrics3LyricsTimestampParse($Lyrics3data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testLyrics3LyricsTimestampParse12()
{
    $Lyrics3data = m::mock('UntypedParameter_Lyrics3data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == true (line 265)
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == false (line 265)
    // if (isset($thislinetimestamps) && \is_array($thislinetimestamps)) == true (line 270)
    // if (isset($Lyrics3data['synchedlyrics']) && \is_array($Lyrics3data['synchedlyrics'])) == false (line 284)

    $actual = $this->getid3_lyrics3->Lyrics3LyricsTimestampParse($Lyrics3data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testLyrics3LyricsTimestampParse13()
{
    $Lyrics3data = m::mock('UntypedParameter_Lyrics3data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == true (line 265)
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == false (line 265)
    // if (isset($thislinetimestamps) && \is_array($thislinetimestamps)) == true (line 270)
    // if (isset($Lyrics3data['synchedlyrics']) && \is_array($Lyrics3data['synchedlyrics'])) == true (line 284)

    $actual = $this->getid3_lyrics3->Lyrics3LyricsTimestampParse($Lyrics3data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testLyrics3LyricsTimestampParse14()
{
    $Lyrics3data = m::mock('UntypedParameter_Lyrics3data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == true (line 265)
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == false (line 265)
    // if (isset($thislinetimestamps) && \is_array($thislinetimestamps)) == true (line 270)
    // if (isset($Lyrics3data['synchedlyrics'][$timestamp])) == false (line 273)
    // if (isset($Lyrics3data['synchedlyrics']) && \is_array($Lyrics3data['synchedlyrics'])) == false (line 284)

    $actual = $this->getid3_lyrics3->Lyrics3LyricsTimestampParse($Lyrics3data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testLyrics3LyricsTimestampParse15()
{
    $Lyrics3data = m::mock('UntypedParameter_Lyrics3data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == true (line 265)
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == false (line 265)
    // if (isset($thislinetimestamps) && \is_array($thislinetimestamps)) == true (line 270)
    // if (isset($Lyrics3data['synchedlyrics'][$timestamp])) == false (line 273)
    // if (isset($Lyrics3data['synchedlyrics']) && \is_array($Lyrics3data['synchedlyrics'])) == true (line 284)

    $actual = $this->getid3_lyrics3->Lyrics3LyricsTimestampParse($Lyrics3data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testLyrics3LyricsTimestampParse16()
{
    $Lyrics3data = m::mock('UntypedParameter_Lyrics3data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == true (line 265)
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == false (line 265)
    // if (isset($thislinetimestamps) && \is_array($thislinetimestamps)) == true (line 270)
    // if (isset($Lyrics3data['synchedlyrics'][$timestamp])) == true (line 273)
    // if (isset($Lyrics3data['synchedlyrics']) && \is_array($Lyrics3data['synchedlyrics'])) == false (line 284)

    $actual = $this->getid3_lyrics3->Lyrics3LyricsTimestampParse($Lyrics3data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testLyrics3LyricsTimestampParse17()
{
    $Lyrics3data = m::mock('UntypedParameter_Lyrics3data_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == true (line 265)
    // while (\preg_match('#^(\\[[0-9]{2}:[0-9]{2}\\])#', $lyricline, $regs)) == false (line 265)
    // if (isset($thislinetimestamps) && \is_array($thislinetimestamps)) == true (line 270)
    // if (isset($Lyrics3data['synchedlyrics'][$timestamp])) == true (line 273)
    // if (isset($Lyrics3data['synchedlyrics']) && \is_array($Lyrics3data['synchedlyrics'])) == true (line 284)

    $actual = $this->getid3_lyrics3->Lyrics3LyricsTimestampParse($Lyrics3data);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testIntString2Bool0()
{
    $char = m::mock('UntypedParameter_char_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($char == '1') == false (line 291)
    // if ($char == '0') == false (line 293)

    $actual = $this->getid3_lyrics3->IntString2Bool($char);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testIntString2Bool1()
{
    $char = m::mock('UntypedParameter_char_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($char == '1') == false (line 291)
    // if ($char == '0') == true (line 293)

    $actual = $this->getid3_lyrics3->IntString2Bool($char);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testIntString2Bool2()
{
    $char = m::mock('UntypedParameter_char_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($char == '1') == true (line 291)

    $actual = $this->getid3_lyrics3->IntString2Bool($char);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}
}
